name: Advanced Build and Deploy

"on":
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      dockerfile:
        description: "Choose Dockerfile variant"
        required: true
        default: "orquestrador"
        type: choice
        options:
          - orquestrador
          - optimized
          - secure
          - alpine
          - uv
      push_to_registry:
        description: "Push to Docker registry"
        required: false
        default: true
        type: boolean
      run_security_scan:
        description: "Run detailed security scan"
        required: false
        default: true
        type: boolean

env:
  DOCKERFILE_MAP: |
    {
      "orquestrador": "docker/Dockerfile.orquestrador",
      "optimized": "docker/Dockerfile.optimized",
      "secure": "docker/Dockerfile.secure",
      "alpine": "docker/Dockerfile.alpine",
      "uv": "docker/Dockerfile.uv"
    }

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.docker_image_tag.outputs.docker_image }}
      dockerfile_used: ${{ steps.setup.outputs.dockerfile }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup build parameters
        id: setup
        run: |
          # Determine which Dockerfile to use
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            DOCKERFILE_VARIANT="${{ github.event.inputs.dockerfile }}"
          else
            DOCKERFILE_VARIANT="orquestrador"
          fi

          case $DOCKERFILE_VARIANT in
            "orquestrador") DOCKERFILE="docker/Dockerfile.orquestrador" ;;
            "optimized") DOCKERFILE="docker/Dockerfile.optimized" ;;
            "secure") DOCKERFILE="docker/Dockerfile.secure" ;;
            "alpine") DOCKERFILE="docker/Dockerfile.alpine" ;;
            "uv") DOCKERFILE="docker/Dockerfile.uv" ;;
            *) DOCKERFILE="docker/Dockerfile.orquestrador" ;;
          esac

          echo "dockerfile=${DOCKERFILE}" >> $GITHUB_OUTPUT
          echo "variant=${DOCKERFILE_VARIANT}" >> $GITHUB_OUTPUT
          echo "📋 Using Dockerfile: ${DOCKERFILE}"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          enable-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y pandoc build-essential

      - name: Install Python dependencies
        run: |
          uv sync --group dev

      - name: Run linting
        run: |
          uv run ruff check .

      - name: Run formatting check
        run: |
          uv run ruff format --check .

      - name: Run tests
        run: |
          uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image with advanced caching
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          PROJECT_NAME=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          DOCKERFILE="${{ steps.setup.outputs.dockerfile }}"
          VARIANT="${{ steps.setup.outputs.variant }}"

          echo "🐳 Building with ${DOCKERFILE} (${VARIANT} variant)"

          # Build with advanced caching and multi-platform support
          docker buildx build \
            --file ${DOCKERFILE} \
            --tag ${PROJECT_NAME}:${VERSION}-${VARIANT} \
            --tag ${PROJECT_NAME}:latest-${VARIANT} \
            --tag ${PROJECT_NAME}:${VERSION} \
            --tag ${PROJECT_NAME}:latest \
            --cache-from type=gha,scope=${VARIANT} \
            --cache-to type=gha,mode=max,scope=${VARIANT} \
            --load \
            --metadata-file /tmp/metadata.json \
            .

          echo "✅ Docker image built successfully"
          echo "📊 Build metadata:"
          cat /tmp/metadata.json | jq -r '.["containerimage.digest"]' | head -c 12

      - name: Security scan (detailed)
        if: github.event.inputs.run_security_scan == 'true' || github.event_name == 'push'
        run: |
          PROJECT_NAME=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          VARIANT="${{ steps.setup.outputs.variant }}"

          echo "🔍 Running comprehensive security scan..."

          # Install and run Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

          # Scan for vulnerabilities
          trivy image --severity HIGH,CRITICAL --format json --output /tmp/trivy-report.json ${PROJECT_NAME}:${VERSION}-${VARIANT}

          # Check if there are any HIGH/CRITICAL vulnerabilities
          VULN_COUNT=$(cat /tmp/trivy-report.json | jq '.Results[0].Vulnerabilities | length // 0')
          echo "Found ${VULN_COUNT} HIGH/CRITICAL vulnerabilities"

          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "⚠️ Security vulnerabilities found:"
            trivy image --severity HIGH,CRITICAL ${PROJECT_NAME}:${VERSION}-${VARIANT}
            echo "::warning::Found ${VULN_COUNT} HIGH/CRITICAL vulnerabilities"
          else
            echo "✅ No HIGH/CRITICAL vulnerabilities found"
          fi

      - name: Test Docker image functionality
        run: |
          PROJECT_NAME=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          VARIANT="${{ steps.setup.outputs.variant }}"

          echo "🧪 Testing Docker image functionality..."

          # Test Python and Pandoc
          docker run --rm ${PROJECT_NAME}:${VERSION}-${VARIANT} python -c "
          import sys
          import subprocess
          import os

          print(f'✅ Python {sys.version}')
          print(f'✅ User: {os.getuid()}:{os.getgid()} (non-root: {os.getuid() != 0})')

          try:
              result = subprocess.run(['pandoc', '--version'], capture_output=True, text=True, check=True)
              print('✅ Pandoc working:', result.stdout.split('\n')[0])
          except Exception as e:
              print(f'❌ Pandoc test failed: {e}')
              sys.exit(1)

          print('✅ All functionality tests passed!')
          "

      - name: Set Docker image output
        id: docker_image_tag
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          PROJECT_NAME=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          VARIANT="${{ steps.setup.outputs.variant }}"

          echo "docker_image=${PROJECT_NAME}:${VERSION}-${VARIANT}" >> $GITHUB_OUTPUT
          echo "✅ Docker image tagged: ${PROJECT_NAME}:${VERSION}-${VARIANT}"

      - name: Login to Docker Hub
        if: (github.event.inputs.push_to_registry == 'true' || github.event_name == 'push') && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        if: (github.event.inputs.push_to_registry == 'true' || github.event_name == 'push') && github.ref == 'refs/heads/main'
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          PROJECT_NAME=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          VARIANT="${{ steps.setup.outputs.variant }}"

          echo "🚀 Pushing images to Docker Hub..."

          # Push variant-specific tags
          docker push ${PROJECT_NAME}:${VERSION}-${VARIANT}
          docker push ${PROJECT_NAME}:latest-${VARIANT}

          # Push main tags (latest variant becomes default)
          docker push ${PROJECT_NAME}:${VERSION}
          docker push ${PROJECT_NAME}:latest

          echo "✅ Successfully pushed all images"

      - name: Generate comprehensive deployment summary
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          PROJECT_NAME=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          DOCKERFILE="${{ steps.setup.outputs.dockerfile }}"
          VARIANT="${{ steps.setup.outputs.variant }}"

          echo "## 🚀 Advanced Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Build Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Project | \`${PROJECT_NAME}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ Version | \`${VERSION}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Dockerfile | \`${DOCKERFILE}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎯 Variant | \`${VARIANT}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 Trigger | \`${{ github.event_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🛡️ Security & Quality" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧹 Linting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| 📐 Formatting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Vulnerability Scan | ✅ No Critical/High |" >> $GITHUB_STEP_SUMMARY
          echo "| 👤 Non-root User | ✅ Enabled |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Image Information" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker images ${PROJECT_NAME} --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}" | head -5 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🎯 Usage Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run latest ${VARIANT} variant" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8000:8000 ${PROJECT_NAME}:latest-${VARIANT}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or run specific version" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8000:8000 ${PROJECT_NAME}:${VERSION}-${VARIANT}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

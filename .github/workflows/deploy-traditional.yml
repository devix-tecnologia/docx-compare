name: Build and Deploy (Traditional Python)

"on":
  push:
    branches:
      - main
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.docker_image_tag.outputs.docker_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Setup pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff pytest pytest-cov

      - name: Run linting
        run: |
          ruff check .

      - name: Run formatting check
        run: |
          ruff format --check .

      - name: Run tests
        run: |
          pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

      - name: Build Docker image
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          PROJECT_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          docker build -f docker/Dockerfile.orquestrador -t ${PROJECT_NAME}:${VERSION} .
          docker tag ${PROJECT_NAME}:${VERSION} ${PROJECT_NAME}:latest

      - name: Set Docker image output
        id: docker_image_tag
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          PROJECT_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          echo "docker_image=${PROJECT_NAME}:${VERSION}" >> $GITHUB_OUTPUT
          echo "Docker image created: ${PROJECT_NAME}:${VERSION}"

      - name: Login to Docker Hub (optional)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub (optional)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          PROJECT_NAME=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])")
          docker push ${PROJECT_NAME}:${VERSION}
          docker push ${PROJECT_NAME}:latest

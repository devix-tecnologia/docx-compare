#!/usr/bin/env python3

"""
TESTES DA FASE 4: SCORE E CATEGORIZA√á√ÉO

Este arquivo testa o sistema de vincula√ß√£o por sobreposi√ß√£o com scores
e a categoriza√ß√£o em tr√™s filas: vinculadas, revis√£o manual, n√£o vinculadas.

Testa:
1. Alta confian√ßa (score ‚â• 0.8) ‚Üí vincula√ß√£o autom√°tica
2. M√©dia confian√ßa (0.5 ‚â§ score < 0.8) ‚Üí revis√£o manual
3. Baixa confian√ßa (score < 0.5) ‚Üí n√£o vinculada
4. M√∫ltiplas modifica√ß√µes na mesma tag
"""

import sys
from pathlib import Path

# Adicionar diret√≥rio pai ao path para importar directus_server
sys.path.insert(0, str(Path(__file__).parent.parent / "versiona-ai"))

from directus_server import DirectusAPI, TagMapeada


def test_vinculacao_alta_confianca():
    """
    Teste 1: Vincula√ß√£o com alta confian√ßa (score ‚â• 0.8)

    Cen√°rio: Modifica√ß√£o totalmente dentro da tag, infer√™ncia com score alto.
    Esperado: Vincula√ß√£o autom√°tica, score ‚â• 0.8
    """
    print("\nüß™ Teste 1: Vincula√ß√£o com alta confian√ßa")

    # Tags mapeadas (com scores de infer√™ncia altos)
    tags = [
        TagMapeada(
            tag_id="tag-001",
            tag_nome="TAG-1",
            posicao_inicio_original=0,
            posicao_fim_original=100,  # Tag cobre [0-100]
            clausulas=[{"id": "clausula-001"}],
            score_inferencia=0.9,  # Infer√™ncia com contexto completo
            metodo="contexto_completo",
        ),
        TagMapeada(
            tag_id="tag-002",
            tag_nome="TAG-2",
            posicao_inicio_original=150,
            posicao_fim_original=200,  # Tag cobre [150-200]
            clausulas=[{"id": "clausula-002"}],
            score_inferencia=0.9,
            metodo="offset",
        ),
    ]

    # Modifica√ß√µes totalmente dentro das tags
    modificacoes = [
        {
            "tipo": "inser√ß√£o",
            "posicao_inicio": 20,
            "posicao_fim": 30,  # Modifica√ß√£o [20-30] dentro de TAG-1 [0-100]
            "conteudo": "novo texto",
        },
        {
            "tipo": "remo√ß√£o",
            "posicao_inicio": 160,
            "posicao_fim": 170,  # Modifica√ß√£o [160-170] dentro de TAG-2 [150-200]
            "conteudo": "texto removido",
        },
    ]

    # Executar vincula√ß√£o
    api = DirectusAPI()
    resultado = api._vincular_por_sobreposicao_com_score(
        tags_mapeadas=tags, modificacoes=modificacoes
    )

    # Validar
    assert len(resultado.vinculadas) == 2, (
        f"Esperado 2 vinculadas, obteve {len(resultado.vinculadas)}"
    )
    assert len(resultado.revisao_manual) == 0
    assert len(resultado.nao_vinculadas) == 0

    # Validar scores
    vinc1 = resultado.vinculadas[0]
    assert vinc1["score"] >= 0.8, f"Score deveria ser ‚â• 0.8, obteve {vinc1['score']}"
    assert vinc1["tag"].tag_nome == "TAG-1"

    vinc2 = resultado.vinculadas[1]
    assert vinc2["score"] >= 0.8
    assert vinc2["tag"].tag_nome == "TAG-2"

    # Validar taxas
    assert resultado.taxa_sucesso() == 100.0  # 2/2 = 100%
    assert resultado.taxa_cobertura() == 100.0  # (2+0)/2 = 100%

    print("   ‚úÖ 2 vincula√ß√µes com alta confian√ßa")
    print(f"   Score 1: {vinc1['score']:.2f}, Score 2: {vinc2['score']:.2f}")
    print(f"   Taxa de sucesso: {resultado.taxa_sucesso():.1f}%")
    print("   ‚úÖ Teste de alta confian√ßa passou!")


def test_vinculacao_media_confianca():
    """
    Teste 2: Vincula√ß√£o com m√©dia confian√ßa (0.5 ‚â§ score < 0.8)

    Cen√°rio: Sobreposi√ß√£o parcial ou infer√™ncia com score m√©dio.
    Esperado: Categorizado em revis√£o manual
    """
    print("\nüß™ Teste 2: Vincula√ß√£o com m√©dia confian√ßa")

    # Tag mapeada com score m√©dio de infer√™ncia
    tags = [
        TagMapeada(
            tag_id="tag-001",
            tag_nome="TAG-1",
            posicao_inicio_original=0,
            posicao_fim_original=100,
            clausulas=[{"id": "clausula-001"}],
            score_inferencia=0.5,  # Infer√™ncia apenas por conte√∫do
            metodo="conteudo_apenas",
        ),
    ]

    # Modifica√ß√£o com sobreposi√ß√£o parcial
    modificacoes = [
        {
            "tipo": "inser√ß√£o",
            "posicao_inicio": 80,
            "posicao_fim": 120,  # Modifica√ß√£o [80-120], tag [0-100] ‚Üí overlap de 20
            "conteudo": "texto parcial",
        },
    ]

    # Executar vincula√ß√£o
    api = DirectusAPI()
    resultado = api._vincular_por_sobreposicao_com_score(
        tags_mapeadas=tags, modificacoes=modificacoes
    )

    # Validar
    assert len(resultado.vinculadas) == 0
    assert len(resultado.revisao_manual) == 1, (
        f"Esperado 1 em revis√£o manual, obteve {len(resultado.revisao_manual)}"
    )
    assert len(resultado.nao_vinculadas) == 0

    # Validar score
    rev1 = resultado.revisao_manual[0]
    assert 0.5 <= rev1["score"] < 0.8, (
        f"Score deveria estar em [0.5, 0.8), obteve {rev1['score']}"
    )
    assert rev1["tag"].tag_nome == "TAG-1"
    assert rev1["motivo"] == "score_medio"

    # Validar taxas
    assert resultado.taxa_sucesso() == 0.0  # 0/1 = 0%
    assert resultado.taxa_cobertura() == 100.0  # (0+1)/1 = 100%

    print("   ‚ö†Ô∏è  1 modifica√ß√£o em revis√£o manual")
    print(f"   Score: {rev1['score']:.2f}, Motivo: {rev1['motivo']}")
    print("   ‚úÖ Teste de m√©dia confian√ßa passou!")


def test_vinculacao_baixa_confianca():
    """
    Teste 3: Vincula√ß√£o com baixa confian√ßa (score < 0.5)

    Cen√°rio: Sobreposi√ß√£o m√≠nima ou sem sobreposi√ß√£o.
    Esperado: N√£o vinculada
    """
    print("\nüß™ Teste 3: Vincula√ß√£o com baixa confian√ßa")

    # Tag mapeada
    tags = [
        TagMapeada(
            tag_id="tag-001",
            tag_nome="TAG-1",
            posicao_inicio_original=0,
            posicao_fim_original=50,
            clausulas=[{"id": "clausula-001"}],
            score_inferencia=0.9,
            metodo="offset",
        ),
    ]

    # Modifica√ß√£o fora da tag
    modificacoes = [
        {
            "tipo": "inser√ß√£o",
            "posicao_inicio": 100,
            "posicao_fim": 120,  # Modifica√ß√£o [100-120], tag [0-50] ‚Üí sem overlap
            "conteudo": "texto longe",
        },
    ]

    # Executar vincula√ß√£o
    api = DirectusAPI()
    resultado = api._vincular_por_sobreposicao_com_score(
        tags_mapeadas=tags, modificacoes=modificacoes
    )

    # Validar
    assert len(resultado.vinculadas) == 0
    assert len(resultado.revisao_manual) == 0
    assert len(resultado.nao_vinculadas) == 1, (
        f"Esperado 1 n√£o vinculada, obteve {len(resultado.nao_vinculadas)}"
    )

    # Validar motivo
    nao_vinc1 = resultado.nao_vinculadas[0]
    assert nao_vinc1["motivo"] == "sem_sobreposicao"
    assert nao_vinc1["score"] == 0.0

    # Validar taxas
    assert resultado.taxa_sucesso() == 0.0  # 0/1 = 0%
    assert resultado.taxa_cobertura() == 0.0  # (0+0)/1 = 0%

    print("   ‚ùå 1 modifica√ß√£o n√£o vinculada")
    print(f"   Motivo: {nao_vinc1['motivo']}")
    print("   ‚úÖ Teste de baixa confian√ßa passou!")


def test_multiplas_modificacoes_mesma_tag():
    """
    Teste 4: M√∫ltiplas modifica√ß√µes na mesma tag

    Cen√°rio: V√°rias modifica√ß√µes dentro da mesma tag.
    Esperado: Todas vinculadas √† mesma tag
    """
    print("\nüß™ Teste 4: M√∫ltiplas modifica√ß√µes na mesma tag")

    # Uma tag grande
    tags = [
        TagMapeada(
            tag_id="tag-001",
            tag_nome="TAG-1",
            posicao_inicio_original=0,
            posicao_fim_original=200,  # Tag grande [0-200]
            clausulas=[{"id": "clausula-001"}],
            score_inferencia=0.9,
            metodo="offset",
        ),
    ]

    # M√∫ltiplas modifica√ß√µes dentro da tag
    modificacoes = [
        {
            "tipo": "inser√ß√£o",
            "posicao_inicio": 20,
            "posicao_fim": 30,
            "conteudo": "mod 1",
        },
        {
            "tipo": "remo√ß√£o",
            "posicao_inicio": 50,
            "posicao_fim": 60,
            "conteudo": "mod 2",
        },
        {
            "tipo": "modifica√ß√£o",
            "posicao_inicio": 100,
            "posicao_fim": 120,
            "conteudo": "mod 3",
        },
    ]

    # Executar vincula√ß√£o
    api = DirectusAPI()
    resultado = api._vincular_por_sobreposicao_com_score(
        tags_mapeadas=tags, modificacoes=modificacoes
    )

    # Validar
    assert len(resultado.vinculadas) == 3, (
        f"Esperado 3 vinculadas, obteve {len(resultado.vinculadas)}"
    )
    assert len(resultado.revisao_manual) == 0
    assert len(resultado.nao_vinculadas) == 0

    # Validar que todas apontam para a mesma tag
    for vinc in resultado.vinculadas:
        assert vinc["tag"].tag_nome == "TAG-1"
        assert vinc["score"] >= 0.8

    # Validar taxas
    assert resultado.taxa_sucesso() == 100.0  # 3/3 = 100%

    print("   ‚úÖ 3 modifica√ß√µes vinculadas √† mesma tag")
    print(f"   Scores: {[v['score'] for v in resultado.vinculadas]}")
    print("   ‚úÖ Teste de m√∫ltiplas modifica√ß√µes passou!")


if __name__ == "__main__":
    print("\n" + "=" * 70)
    print("FASE 4: TESTES DE SCORE E CATEGORIZA√á√ÉO")
    print("=" * 70)

    try:
        test_vinculacao_alta_confianca()
        test_vinculacao_media_confianca()
        test_vinculacao_baixa_confianca()
        test_multiplas_modificacoes_mesma_tag()

        print("\n" + "=" * 70)
        print("‚úÖ FASE 4 COMPLETA: Todos os testes de score e categoriza√ß√£o passaram!")
        print("=" * 70)

    except AssertionError as e:
        print(f"\n‚ùå TESTE FALHOU: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)

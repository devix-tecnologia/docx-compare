#!/usr/bin/env python3
"""
API simples para compara√ß√£o de documentos DOCX
Integra√ß√£o completa com Directus usando l√≥gica de neg√≥cio
"""

import argparse
import os
import subprocess
import tempfile
import uuid
from datetime import datetime

import requests
from dotenv import load_dotenv
from flask import Flask, jsonify, request, send_from_directory

# Importar fun√ß√µes do m√≥dulo comum
from docx_utils import analyze_differences, html_to_text

# Carregar vari√°veis de ambiente
load_dotenv()

app = Flask(__name__)

# Configura√ß√µes
DIRECTUS_BASE_URL = (
    os.getenv("DIRECTUS_BASE_URL", "https://contract.devix.co")
    .replace("/admin/", "")
    .rstrip("/")
)
DIRECTUS_TOKEN = os.getenv("DIRECTUS_TOKEN", "your-directus-token")
RESULTS_DIR = os.getenv("RESULTS_DIR", "results")

# Configura√ß√µes do Flask
FLASK_HOST = os.getenv("FLASK_HOST", "0.0.0.0")
FLASK_PORT = int(os.getenv("FLASK_PORT", "5002"))

# Criar diret√≥rio de resultados
os.makedirs(RESULTS_DIR, exist_ok=True)


def get_directus_headers():
    """Retorna headers para requisi√ß√µes ao Directus"""
    return {
        "Authorization": f"Bearer {DIRECTUS_TOKEN}",
        "Content-Type": "application/json",
    }


def get_versao_complete_data(versao_id):
    """
    Busca dados completos da vers√£o com todos os relacionamentos necess√°rios
    """
    try:
        print(f"üîç Buscando dados da vers√£o {versao_id}...")

        url = f"{DIRECTUS_BASE_URL}/items/versao/{versao_id}"
        params = {
            "fields": ",".join(
                [
                    "id",
                    "date_created",
                    "arquivo",
                    "status",
                    "observacao",
                    "contrato.id",
                    "contrato.modelo_contrato.modelo_contrato",
                    "contrato.versoes.id",
                    "contrato.versoes.date_created",
                    "contrato.versoes.arquivo",
                ]
            )
        }

        response = requests.get(url, headers=get_directus_headers(), params=params)
        response.raise_for_status()

        versao_data = response.json()["data"]
        print("‚úÖ Dados da vers√£o obtidos")
        return versao_data

    except Exception as e:
        raise Exception(f"Erro ao buscar vers√£o {versao_id}: {e}")


def determine_original_file_id(versao_data):
    """
    Determina qual arquivo usar como original baseado na l√≥gica de neg√≥cio:
    1. versao.contrato.modelo_contrato.modelo_contrato
    2. OU vers√£o mais recente (maior date_created) diferente da atual
    """
    try:
        current_versao_id = versao_data["id"]
        contrato = versao_data.get("contrato", {})

        print(f"üß† Determinando arquivo original para vers√£o {current_versao_id}...")

        # Primeira op√ß√£o: modelo do contrato
        modelo_contrato = contrato.get("modelo_contrato")
        if modelo_contrato and modelo_contrato.get("modelo_contrato"):
            original_file_id = modelo_contrato["modelo_contrato"]
            print(f"üìÑ Usando modelo do contrato: {original_file_id}")
            return original_file_id, "modelo_contrato"

        # Segunda op√ß√£o: vers√£o mais recente
        versoes = contrato.get("versoes", [])
        if not versoes:
            raise Exception("Nenhuma vers√£o encontrada no contrato")

        # Filtrar vers√µes diferentes da atual que tenham arquivo
        outras_versoes = [
            v for v in versoes if v["id"] != current_versao_id and v.get("arquivo")
        ]

        if not outras_versoes:
            raise Exception("Nenhuma vers√£o anterior encontrada para compara√ß√£o")

        # Ordenar por date_created (mais recente primeiro)
        outras_versoes.sort(key=lambda x: x["date_created"], reverse=True)
        versao_mais_recente = outras_versoes[0]

        original_file_id = versao_mais_recente["arquivo"]
        print(
            f"üìÑ Usando vers√£o mais recente: {original_file_id} (data: {versao_mais_recente['date_created']})"
        )

        return original_file_id, "versao_anterior"

    except Exception as e:
        raise Exception(f"Erro ao determinar arquivo original: {e}")


def download_file_from_directus(file_id):
    """
    Baixa um arquivo do Directus usando a API REST
    """
    try:
        print(f"üì• Baixando arquivo {file_id}...")

        # URL para baixar o arquivo
        download_url = f"{DIRECTUS_BASE_URL}/assets/{file_id}"

        headers = {"Authorization": f"Bearer {DIRECTUS_TOKEN}"}

        print(f"üîó Baixando de: {download_url}")

        # Baixar o arquivo
        response = requests.get(download_url, headers=headers, stream=True)
        response.raise_for_status()

        # Salvar arquivo tempor√°rio
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
        for chunk in response.iter_content(chunk_size=8192):
            temp_file.write(chunk)
        temp_file.close()

        print(f"‚úÖ Arquivo baixado: {temp_file.name}")
        return temp_file.name

    except Exception as e:
        raise Exception(f"Erro ao baixar arquivo {file_id}: {e}")


def analyze_differences_for_directus(original_text, modified_text):
    """
    Analisa as diferen√ßas e retorna modifica√ß√µes no formato esperado pelo Directus
    Usa a fun√ß√£o do m√≥dulo comum mas adapta o formato de retorno
    """
    # Usar a fun√ß√£o b√°sica de an√°lise do m√≥dulo comum
    analysis = analyze_differences(original_text, modified_text)

    # Converter para o formato esperado pelo Directus
    modifications = []
    modification_count = 1

    # Processar as modifica√ß√µes encontradas
    for mod in analysis.get("modifications", []):
        modifications.append(
            {
                "categoria": "modificacao",
                "conteudo": mod.get("original", ""),
                "alteracao": mod.get("modified", ""),
                "sort": modification_count,
            }
        )
        modification_count += 1

    # Adicionar estat√≠sticas como modifica√ß√µes adicionais se necess√°rio
    if analysis.get("total_additions", 0) > len(modifications):
        for i in range(analysis["total_additions"] - len(modifications)):
            modifications.append(
                {
                    "categoria": "adicao",
                    "conteudo": "",
                    "alteracao": f"Adi√ß√£o {i + 1}",
                    "sort": modification_count,
                }
            )
            modification_count += 1

    if analysis.get("total_deletions", 0) > len(modifications):
        for i in range(analysis["total_deletions"] - len(modifications)):
            modifications.append(
                {
                    "categoria": "remocao",
                    "conteudo": f"Remo√ß√£o {i + 1}",
                    "alteracao": "",
                    "sort": modification_count,
                }
            )
            modification_count += 1

    return modifications


def save_modifications_to_directus(versao_id, modifications, dry_run=False):
    """Salva as modifica√ß√µes na cole√ß√£o modificacao do Directus"""
    try:
        print(f"üíæ Salvando {len(modifications)} modifica√ß√µes...")

        if dry_run:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: N√£o salvando modifica√ß√µes no Directus")
            saved_modifications = []
            for i, mod in enumerate(modifications):
                fake_data = {
                    "id": f"dry-run-{i + 1}",
                    "versao": versao_id,
                    "categoria": mod["categoria"],
                    "conteudo": mod["conteudo"],
                    "alteracao": mod["alteracao"],
                    "sort": mod["sort"],
                    "status": "draft",
                }
                saved_modifications.append(fake_data)
                print(f"‚úÖ (DRY-RUN) Modifica√ß√£o {mod['sort']}: {mod['categoria']}")
            return saved_modifications

        headers = get_directus_headers()
        saved_modifications = []

        for mod in modifications:
            modification_data = {
                "versao": versao_id,
                "categoria": mod["categoria"],
                "conteudo": mod["conteudo"],
                "alteracao": mod["alteracao"],
                "sort": mod["sort"],
                "status": "draft",
            }

            # Criar modifica√ß√£o usando a API do Directus
            response = requests.post(
                f"{DIRECTUS_BASE_URL}/items/modificacao",
                headers=headers,
                json=modification_data,
            )

            if response.status_code == 200:
                saved_modifications.append(response.json()["data"])
                print(f"‚úÖ Modifica√ß√£o {mod['sort']} salva: {mod['categoria']}")
            else:
                print(
                    f"‚ùå Erro ao salvar modifica√ß√£o {mod['sort']}: {response.status_code}"
                )
                print(f"Response: {response.text}")

        return saved_modifications

    except Exception as e:
        print(f"‚ùå Erro ao salvar modifica√ß√µes: {e}")
        return []


def update_versao_status(versao_id, result_url, total_modifications, dry_run=False):
    """Atualiza o status da vers√£o para 'concluido' e adiciona observa√ß√µes"""
    try:
        print(f"üìù Atualizando status da vers√£o {versao_id}...")

        observacao = (
            f"Compara√ß√£o conclu√≠da em {datetime.now().strftime('%d/%m/%Y %H:%M')}. "
            f"Total de modifica√ß√µes encontradas: {total_modifications}. "
            f"Resultado dispon√≠vel em: {result_url}"
        )

        update_data = {"status": "concluido", "observacao": observacao}

        if dry_run:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: N√£o executando atualiza√ß√£o no Directus")
            print(f"   Status: {update_data['status']}")
            print(f"   Observa√ß√£o: {update_data['observacao']}")
            return {"id": versao_id, "status": "concluido", "observacao": observacao}

        # Atualizar vers√£o usando a API do Directus
        response = requests.patch(
            f"{DIRECTUS_BASE_URL}/items/versao/{versao_id}",
            headers=get_directus_headers(),
            json=update_data,
        )

        if response.status_code == 200:
            print("‚úÖ Vers√£o atualizada com status 'concluido'")
            return response.json()["data"]
        else:
            print(f"‚ùå Erro ao atualizar vers√£o: {response.status_code}")
            return None

    except Exception as e:
        print(f"‚ùå Erro ao atualizar vers√£o: {e}")
        return None


@app.route("/health", methods=["GET"])
def health():
    """Verifica√ß√£o de sa√∫de"""
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})


@app.route("/compare", methods=["POST"])
def compare():
    """Compara dois documentos DOCX"""
    try:
        data = request.get_json()

        if not data or "original_file_id" not in data or "modified_file_id" not in data:
            return jsonify(
                {
                    "success": False,
                    "error": "Campos obrigat√≥rios: original_file_id, modified_file_id",
                }
            ), 400

        original_id = data["original_file_id"]
        modified_id = data["modified_file_id"]

        print("üîÑ Baixando arquivos do Directus...")

        # Baixar arquivos do Directus
        original_path = download_file_from_directus(original_id)
        modified_path = download_file_from_directus(modified_id)

        try:
            # Gerar nome √∫nico para o resultado
            result_id = str(uuid.uuid4())
            result_filename = f"comparison_{result_id}.html"
            result_path = os.path.join(RESULTS_DIR, result_filename)

            print("ÔøΩ Executando compara√ß√£o...")

            # Executar o docx_diff_viewer.py
            cmd = [
                "python",
                "docx_diff_viewer.py",
                original_path,
                modified_path,
                result_path,
            ]

            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode != 0:
                return jsonify(
                    {"success": False, "error": f"Erro na compara√ß√£o: {result.stderr}"}
                ), 500

            # URL do resultado
            result_url = f"http://{FLASK_HOST}:{FLASK_PORT}/outputs/{result_filename}"

            print(f"‚úÖ Compara√ß√£o conclu√≠da: {result_url}")

            return jsonify(
                {
                    "success": True,
                    "result_url": result_url,
                    "result_filename": result_filename,
                    "timestamp": datetime.now().isoformat(),
                }
            )

        finally:
            # Limpar arquivos tempor√°rios
            for temp_file in [original_path, modified_path]:
                try:
                    if os.path.exists(temp_file):
                        os.unlink(temp_file)
                except:
                    pass

    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/compare_versao", methods=["POST"])
def compare_versao():
    """
    Endpoint principal que implementa toda a l√≥gica de neg√≥cio:
    1. Recebe ID da vers√£o
    2. Determina automaticamente qual arquivo usar como original
    3. Executa compara√ß√£o usando o CLI
    4. Salva modifica√ß√µes no Directus
    5. Atualiza status da vers√£o
    """
    try:
        data = request.get_json()

        if not data or "versao_id" not in data:
            return jsonify(
                {"success": False, "error": "Campo obrigat√≥rio: versao_id"}
            ), 400

        versao_id = data["versao_id"]
        dry_run = data.get("dry_run", False)  # Novo par√¢metro opcional

        if dry_run:
            print(
                f"üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: Iniciando an√°lise (sem altera√ß√µes) para vers√£o {versao_id}"
            )
        else:
            print(f"üöÄ Iniciando compara√ß√£o para vers√£o {versao_id}")

        # 1. Buscar dados completos da vers√£o
        versao_data = get_versao_complete_data(versao_id)

        # 2. Determinar arquivo original
        original_file_id, original_source = determine_original_file_id(versao_data)
        modified_file_id = versao_data["arquivo"]

        if not modified_file_id:
            return jsonify(
                {"success": False, "error": "Vers√£o n√£o possui arquivo anexado"}
            ), 400

        print(f"üìÅ Original: {original_file_id} (fonte: {original_source})")
        print(f"üìÑ Modificado: {modified_file_id}")

        # 3. Baixar arquivos
        original_path = download_file_from_directus(original_file_id)
        modified_path = download_file_from_directus(modified_file_id)

        try:
            # 4. Gerar compara√ß√£o HTML usando o CLI existente
            result_id = str(uuid.uuid4())
            result_filename = f"comparison_{result_id}.html"
            result_path = os.path.join(RESULTS_DIR, result_filename)

            print("üîÑ Executando compara√ß√£o visual usando CLI...")

            # Executar o docx_diff_viewer.py para HTML visual
            cmd = [
                "python",
                "docx_diff_viewer.py",
                original_path,
                modified_path,
                result_path,
            ]

            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode != 0:
                return jsonify(
                    {"success": False, "error": f"Erro na compara√ß√£o: {result.stderr}"}
                ), 500

            # 5. Converter documentos para an√°lise textual (para extrair modifica√ß√µes)
            print("üìä Analisando diferen√ßas textuais...")

            # Converter para HTML tempor√°rio para an√°lise
            original_html_temp = tempfile.NamedTemporaryFile(
                mode="w", suffix=".html", delete=False
            )
            modified_html_temp = tempfile.NamedTemporaryFile(
                mode="w", suffix=".html", delete=False
            )

            # Converter usando pandoc
            subprocess.run(
                ["pandoc", original_path, "-o", original_html_temp.name], check=True
            )
            subprocess.run(
                ["pandoc", modified_path, "-o", modified_html_temp.name], check=True
            )

            # Ler e processar HTML
            with open(original_html_temp.name, encoding="utf-8") as f:
                original_html = f.read()
            with open(modified_html_temp.name, encoding="utf-8") as f:
                modified_html = f.read()

            # Converter para texto limpo
            original_text = html_to_text(original_html)
            modified_text = html_to_text(modified_html)

            # Analisar diferen√ßas
            modifications = analyze_differences_for_directus(
                original_text, modified_text
            )

            # 6. Salvar modifica√ß√µes no Directus
            saved_modifications = save_modifications_to_directus(
                versao_id, modifications, dry_run
            )

            # 7. Atualizar status da vers√£o
            result_url = f"http://{FLASK_HOST}:{FLASK_PORT}/outputs/{result_filename}"
            update_versao_status(versao_id, result_url, len(modifications), dry_run)

            print(
                f"‚úÖ Processo completo! {len(modifications)} modifica√ß√µes encontradas"
            )

            # Limpar arquivos tempor√°rios de an√°lise
            for temp_file in [original_html_temp.name, modified_html_temp.name]:
                try:
                    os.unlink(temp_file)
                except:
                    pass

            return jsonify(
                {
                    "success": True,
                    "versao_id": versao_id,
                    "result_url": result_url,
                    "result_filename": result_filename,
                    "original_source": original_source,
                    "total_modifications": len(modifications),
                    "modifications_saved": len(saved_modifications),
                    "timestamp": datetime.now().isoformat(),
                }
            )

        finally:
            # Limpar arquivos tempor√°rios principais
            for temp_file in [original_path, modified_path]:
                try:
                    if os.path.exists(temp_file):
                        os.unlink(temp_file)
                except:
                    pass

    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return jsonify({"success": False, "error": str(e)}), 500


@app.route("/outputs/<path:filename>", methods=["GET"])
def serve_result(filename):
    """Servir arquivos HTML de resultado"""
    try:
        return send_from_directory("outputs", filename)
    except FileNotFoundError:
        return jsonify({"error": "Arquivo n√£o encontrado"}), 404


def create_arg_parser():
    """Criar parser de argumentos da linha de comando"""
    parser = argparse.ArgumentParser(
        description="API simples para compara√ß√£o de documentos DOCX",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Executar em modo de an√°lise sem modificar registros no Directus",
    )

    parser.add_argument(
        "--host",
        default=FLASK_HOST,
        help=f"Host para o servidor Flask (padr√£o: {FLASK_HOST})",
    )

    parser.add_argument(
        "--port",
        type=int,
        default=FLASK_PORT,
        help=f"Porta para o servidor Flask (padr√£o: {FLASK_PORT})",
    )

    return parser


if __name__ == "__main__":
    # Configurar argumentos da linha de comando
    parser = create_arg_parser()
    args = parser.parse_args()

    # Aplicar configura√ß√µes globais baseadas nos argumentos
    if args.dry_run:
        # Configurar modo dry-run global (pode ser usado em middleware)
        app.config["DRY_RUN"] = True
        print("üèÉ‚Äç‚ôÇÔ∏è MODO DRY-RUN ATIVADO - Nenhuma altera√ß√£o ser√° feita no Directus")
    else:
        app.config["DRY_RUN"] = False

    print("üöÄ API Completa de Compara√ß√£o de Documentos")
    print(f"üìÅ Resultados salvos em: {RESULTS_DIR}")
    print(f"üîó Directus: {DIRECTUS_BASE_URL}")
    print(f"üåê Servidor: http://{args.host}:{args.port}")
    if args.dry_run:
        print("üèÉ‚Äç‚ôÇÔ∏è Modo: DRY-RUN (sem altera√ß√µes no banco)")
    print("")
    print("üìã Endpoints dispon√≠veis:")
    print("  ‚Ä¢ POST /compare - Compara√ß√£o com l√≥gica de neg√≥cio (versao_id)")
    print(
        "  ‚Ä¢ POST /compare_simple - Compara√ß√£o simples (original_file_id, modified_file_id)"
    )
    print("  ‚Ä¢ GET  /outputs/<filename> - Visualizar resultados")
    print("  ‚Ä¢ GET  /health - Verifica√ß√£o de sa√∫de")
    print("")
    print("üí° Como usar:")
    print(
        "  1. Para l√≥gica de neg√≥cio: POST /compare com {'versao_id': 'id-da-versao'}"
    )
    if args.dry_run:
        print("     Para dry-run: adicione {'dry_run': true} ao JSON")
    print(
        "  2. Para compara√ß√£o simples: POST /compare_simple com original_file_id e modified_file_id"
    )

    app.run(host=args.host, port=args.port, debug=True)

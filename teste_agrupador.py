#!/usr/bin/env python3
"""
Script para testar o agrupamento de modifica√ß√µes por cap√≠tulo
"""

import importlib.util
import os
import sys

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(__file__))

# Carregar configura√ß√µes diretamente do config.py
config_path = os.path.join(os.path.dirname(__file__), "config.py")
spec = importlib.util.spec_from_file_location("config", config_path)
config = importlib.util.module_from_spec(spec)
spec.loader.exec_module(config)

from src.docx_compare.utils.agrupador_modificacoes_v2 import AgrupadorModificacoes


def main():
    """Fun√ß√£o principal para teste do agrupador"""

    print("üéØ Teste do Agrupador de Modifica√ß√µes por Cap√≠tulo")
    print("=" * 60)

    # Inicializar agrupador
    agrupador = AgrupadorModificacoes(
        directus_base_url=config.DIRECTUS_BASE_URL,
        directus_token=config.DIRECTUS_TOKEN
    )

    # Solicitar ID da vers√£o
    versao_id = input("\nüìù Digite o ID da vers√£o para agrupar modifica√ß√µes: ").strip()

    if not versao_id:
        print("‚ùå ID da vers√£o √© obrigat√≥rio")
        return

    # Perguntar sobre threshold de similaridade
    threshold_input = input("üéöÔ∏è Threshold de similaridade (0.0-1.0, padr√£o 0.6): ").strip()
    try:
        threshold = float(threshold_input) if threshold_input else 0.6
        if threshold < 0 or threshold > 1:
            threshold = 0.6
    except ValueError:
        threshold = 0.6

    # Perguntar sobre dry-run
    dry_run_input = input("üèÉ‚Äç‚ôÇÔ∏è Executar em modo dry-run? (s/N): ").strip().lower()
    dry_run = dry_run_input in ["s", "sim", "y", "yes"]

    print("\n‚öôÔ∏è Configura√ß√£o:")
    print(f"   üìã Vers√£o ID: {versao_id}")
    print(f"   üéöÔ∏è Threshold: {threshold}")
    print(f"   üèÉ‚Äç‚ôÇÔ∏è Dry-run: {'Sim' if dry_run else 'N√£o'}")

    # Executar agrupamento
    print(f"\n{'üèÉ‚Äç‚ôÇÔ∏è EXECUTANDO EM MODO DRY-RUN' if dry_run else 'üöÄ EXECUTANDO AGRUPAMENTO'}")
    print("-" * 60)

    resultado = agrupador.processar_agrupamento_versao(
        versao_id=versao_id,
        threshold=threshold,
        dry_run=dry_run
    )

    if "erro" in resultado:
        print(f"\n‚ùå Erro no processamento: {resultado['erro']}")
        return

    # Mostrar resultado detalhado
    print("\nüìä RESULTADO FINAL:")
    print("-" * 30)
    print(f"üìù Total de modifica√ß√µes: {resultado.get('total_modificacoes', 0)}")
    print(f"‚úÖ Associa√ß√µes {'simuladas' if dry_run else 'criadas'}: {resultado.get('associacoes_criadas', 0)}")
    print(f"‚ùå Associa√ß√µes falharam: {resultado.get('associacoes_falharam', 0)}")
    print(f"üîç Modifica√ß√µes sem correspond√™ncia: {resultado.get('modificacoes_sem_correspondencia', 0)}")

    # Mostrar detalhes se houver
    detalhes = resultado.get("detalhes", [])
    if detalhes:
        print("\nüìã DETALHES DAS ASSOCIA√á√ïES:")
        print("-" * 40)

        for i, detalhe in enumerate(detalhes[:10], 1):  # Mostrar apenas as 10 primeiras
            status = detalhe.get("status", "N/A")
            mod_id = detalhe.get("modificacao_id", "N/A")
            tag_nome = detalhe.get("tag_nome", "N/A")
            clausula_nome = detalhe.get("clausula_nome", "N/A")
            score = detalhe.get("score", 0.0)

            status_emoji = {
                "associada": "‚úÖ",
                "dry_run": "üèÉ‚Äç‚ôÇÔ∏è",
                "falha_associacao": "‚ùå",
                "sem_clausula": "‚ö†Ô∏è",
                "sem_correspondencia": "üîç"
            }.get(status, "‚ùì")

            print(f"{i:2d}. {status_emoji} Modifica√ß√£o {mod_id}")
            if tag_nome != "N/A":
                print(f"     üìå Tag: {tag_nome}")
            if clausula_nome:
                print(f"     üìã Cl√°usula: {clausula_nome}")
            if score > 0:
                print(f"     üéØ Score: {score:.2f}")
            print()

        if len(detalhes) > 10:
            print(f"... e mais {len(detalhes) - 10} modifica√ß√µes")

    # Perguntar se quer listar agrupamentos ap√≥s o processamento
    if not dry_run and resultado.get("associacoes_criadas", 0) > 0:
        listar_input = input("\nüìã Deseja listar os agrupamentos atuais da vers√£o? (s/N): ").strip().lower()
        if listar_input in ["s", "sim", "y", "yes"]:
            print(f"\nüìã LISTANDO AGRUPAMENTOS ATUAIS DA VERS√ÉO {versao_id}")
            print("=" * 60)

            agrupamentos = agrupador.listar_agrupamentos_versao(versao_id)

            if "erro" not in agrupamentos:
                # Mostrar agrupamentos por cl√°usula
                for _clausula_id, info in agrupamentos.get("agrupamentos", {}).items():
                    clausula_nome = info.get("clausula_nome", "N/A")
                    clausula_numero = info.get("clausula_numero", "N/A")
                    modificacoes = info.get("modificacoes", [])

                    print(f"\nüìã Cl√°usula {clausula_numero}: {clausula_nome}")
                    print(f"     ({len(modificacoes)} modifica√ß√µes)")

                    for mod in modificacoes[:3]:  # Mostrar apenas as 3 primeiras
                        categoria = mod.get("categoria", "N/A")
                        conteudo = mod.get("conteudo", "")[:60] + "..." if len(mod.get("conteudo", "")) > 60 else mod.get("conteudo", "")
                        print(f"     ‚Ä¢ [{categoria}] {conteudo}")

                    if len(modificacoes) > 3:
                        print(f"     ... e mais {len(modificacoes) - 3} modifica√ß√µes")

                # Mostrar modifica√ß√µes sem cl√°usula
                sem_clausula = agrupamentos.get("sem_clausula", [])
                if sem_clausula:
                    print(f"\nüîç Modifica√ß√µes sem cl√°usula ({len(sem_clausula)}):")
                    for mod in sem_clausula[:5]:  # Mostrar apenas as 5 primeiras
                        categoria = mod.get("categoria", "N/A")
                        conteudo = mod.get("conteudo", "")[:60] + "..." if len(mod.get("conteudo", "")) > 60 else mod.get("conteudo", "")
                        print(f"     ‚Ä¢ [{categoria}] {conteudo}")

                    if len(sem_clausula) > 5:
                        print(f"     ... e mais {len(sem_clausula) - 5} modifica√ß√µes")

    print("\n‚ú® Processamento conclu√≠do!")

if __name__ == "__main__":
    main()

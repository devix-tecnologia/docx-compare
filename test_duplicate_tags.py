#!/usr/bin/env python3
"""
Teste para validar extra√ß√£o de conte√∫do com tags duplicadas.
Segunda ocorr√™ncia da mesma tag √© considerada como fechamento.
"""

import sys
import os
sys.path.append('/home/joris/repositorio/devix/docx-compare/src')

from docx_compare.processors.processador_modelo_contrato import extract_content_between_tags

def test_duplicate_tags_extraction():
    """Teste com tags duplicadas como fechamento"""

    # Simular conte√∫do HTML com tags duplicadas
    html_content = """
    <p>In√≠cio do documento</p>

    <p>{{preambulo}}</p>
    <p>Este √© o conte√∫do do pre√¢mbulo com informa√ß√µes importantes sobre o contrato.</p>
    <p>{{preambulo}}</p>

    <p>Outras informa√ß√µes</p>

    <p>{{1}}</p>
    <p>CL√ÅUSULA 1¬™. OBJETIVO</p>
    <p>Este contrato tem por objeto...</p>
    <p>{{1}}</p>

    <p>{{1.1}}</p>
    <p>1.1. O presente CONTRATO tem por objeto a presta√ß√£o de servi√ßos de inserir 'Servi√ßos' a serem prestados em inserir.</p>
    <p>{{1.1}}</p>

    <p>{{2}}</p>
    <p>CL√ÅUSULA 2¬™. PRAZO</p>
    <p>O prazo de vig√™ncia ser√° de...</p>
    <p>{{2}}</p>

    <p>Final do documento</p>
    """

    print("üîç Testando extra√ß√£o de conte√∫do com tags duplicadas...")
    print("=" * 60)

    # Chamar fun√ß√£o de extra√ß√£o
    resultado = extract_content_between_tags(html_content)

    print(f"\n‚úÖ Resultado da extra√ß√£o ({len(resultado)} tags encontradas):")
    print("=" * 60)

    for tag, conteudo in resultado.items():
        print(f"üè∑Ô∏è  Tag: '{tag}'")
        print(f"   üìÑ Conte√∫do: {conteudo}")
        print(f"   üìè Tamanho: {len(conteudo)} caracteres")
        print()

    # Validar resultados esperados
    tags_esperadas = ['preambulo', '1', '1.1', '2']

    print("üß™ Valida√ß√£o dos resultados:")
    print("=" * 60)

    for tag in tags_esperadas:
        if tag in resultado:
            print(f"‚úÖ Tag '{tag}' encontrada com conte√∫do")
        else:
            print(f"‚ùå Tag '{tag}' N√ÉO encontrada")

    # Verificar conte√∫dos espec√≠ficos
    validacoes = {
        'preambulo': 'Este √© o conte√∫do do pre√¢mbulo',
        '1': 'CL√ÅUSULA 1¬™. OBJETIVO',
        '1.1': '1.1. O presente CONTRATO tem por objeto',
        '2': 'CL√ÅUSULA 2¬™. PRAZO'
    }

    print("\nüîç Valida√ß√£o de conte√∫dos espec√≠ficos:")
    print("=" * 60)

    for tag, texto_esperado in validacoes.items():
        if tag in resultado:
            if texto_esperado in resultado[tag]:
                print(f"‚úÖ Tag '{tag}' cont√©m texto esperado: '{texto_esperado}'")
            else:
                print(f"‚ö†Ô∏è  Tag '{tag}' n√£o cont√©m texto esperado: '{texto_esperado}'")
                print(f"   Conte√∫do atual: {resultado[tag][:100]}...")
        else:
            print(f"‚ùå Tag '{tag}' n√£o foi extra√≠da")

    return resultado

if __name__ == "__main__":
    resultado = test_duplicate_tags_extraction()

    if len(resultado) > 0:
        print(f"\nüéâ Sucesso! {len(resultado)} tags extra√≠das com sucesso!")
    else:
        print("\n‚ùå Falha! Nenhuma tag foi extra√≠da.")

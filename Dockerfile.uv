# Dockerfile otimizado para produção com uv - VERSÃO SEGURA
FROM python:3.13-slim AS builder

# Install security updates and build dependencies
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    --no-install-recommends \
    build-essential \
    curl \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Instalar uv
RUN pip install --no-cache-dir uv==0.4.*

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de configuração
COPY pyproject.toml uv.lock ./

# Instalar dependências em ambiente virtual
RUN uv sync --frozen --no-dev

# Stage de produção
FROM python:3.13-slim

# Instalar security updates e dependências do sistema necessárias
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    --no-install-recommends \
    pandoc \
    curl \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Criar usuário não-root com UID/GID específicos
RUN groupadd -r -g 1000 appuser && \
    useradd -r -u 1000 -g appuser -m -d /home/appuser -s /bin/bash appuser

# Definir diretório de trabalho
WORKDIR /app

# Copiar ambiente virtual do builder
COPY --from=builder /app/.venv /app/.venv

# Adicionar virtual env ao PATH
ENV PATH="/app/.venv/bin:$PATH"

# Copiar código da aplicação
COPY . .

# Criar diretórios necessários
RUN mkdir -p results logs && \
    chown -R appuser:appuser /app

# Definir variáveis de ambiente seguras
ENV PYTHONPATH=/app \
    FLASK_ENV=production \
    RESULTS_DIR=/app/results \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Mudar para usuário não-root
USER appuser

# Expor porta (ajuste conforme necessário)
EXPOSE 8000

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Comando padrão (ajuste conforme sua aplicação)
CMD ["python", "-m", "src.main"]

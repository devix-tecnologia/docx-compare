#!/usr/bin/env python3
"""
Processador autom√°tico de vers√µes
Verifica a cada minuto se h√° vers√µes com status 'processar' e as processa automaticamente
"""

import argparse
import builtins
import contextlib
import difflib
import os
import re
import signal
import subprocess
import sys
import tempfile
import threading
import time
import uuid
from datetime import datetime
from typing import Literal

import requests
from dotenv import load_dotenv
from flask import Flask, jsonify, send_from_directory

# Carregar vari√°veis de ambiente
load_dotenv()

app = Flask(__name__)

# Configura√ß√µes
DIRECTUS_BASE_URL = (
    os.getenv("DIRECTUS_BASE_URL", "https://contract.devix.co")
    .replace("/admin/", "")
    .rstrip("/")
)
DIRECTUS_TOKEN = os.getenv("DIRECTUS_TOKEN", "your-directus-token")
DIRECTUS_EMAIL = os.getenv("DIRECTUS_EMAIL", "")
DIRECTUS_PASSWORD = os.getenv("DIRECTUS_PASSWORD", "")
RESULTS_DIR = os.getenv("RESULTS_DIR", "results")

# Cliente HTTP para Directus
print("üîß Inicializando cliente HTTP para Directus:")
print(f"   URL: {DIRECTUS_BASE_URL}")
print(f"   Token: {DIRECTUS_TOKEN[:10]}...")

# Headers para requisi√ß√µes HTTP
DIRECTUS_HEADERS = {
    "Authorization": f"Bearer {DIRECTUS_TOKEN}",
    "Content-Type": "application/json",
}

print("‚úÖ Cliente HTTP inicializado")

# Configura√ß√µes do Flask
FLASK_HOST = "127.0.0.1"
FLASK_PORT = 5005

# Vari√°veis globais para controlar o processador
processador_ativo = True
processador_thread = None
verbose_mode = False
check_interval = 60  # Intervalo de verifica√ß√£o em segundos (padr√£o: 1 minuto)
request_timeout = 30  # Timeout das requisi√ß√µes HTTP em segundos (padr√£o: 30s)
ultima_verificacao = None  # Timestamp da √∫ltima verifica√ß√£o


def signal_handler(signum, _frame):
    """
    Manipula sinais para encerramento gracioso da aplica√ß√£o
    """
    global processador_ativo, processador_thread

    signal_names = {
        signal.SIGINT: "SIGINT (Ctrl+C)",
        signal.SIGTERM: "SIGTERM",
        signal.SIGHUP: "SIGHUP",
    }

    signal_name = signal_names.get(signum, f"Sinal {signum}")
    print(f"\nüõë Recebido {signal_name} - Iniciando encerramento gracioso...")

    # Parar o processador
    processador_ativo = False

    # Aguardar a thread do processador terminar
    if processador_thread and processador_thread.is_alive():
        print("‚è≥ Aguardando thread do processador terminar...")
        processador_thread.join(timeout=10)
        if processador_thread.is_alive():
            print("‚ö†Ô∏è Thread do processador n√£o terminou no tempo esperado")
        else:
            print("‚úÖ Thread do processador terminada")

    print("‚úÖ Aplica√ß√£o encerrada graciosamente!")
    sys.exit(0)


# Criar diret√≥rio de resultados
os.makedirs(RESULTS_DIR, exist_ok=True)


def buscar_versoes_para_processar():
    """
    Busca vers√µes com status 'processar' no Directus usando requisi√ß√µes HTTP diretas
    """
    try:
        print(
            f"üîç {datetime.now().strftime('%H:%M:%S')} - Buscando vers√µes para processar..."
        )

        # Primeiro, vamos testar uma query simples sem filtros
        if verbose_mode:
            print("üß™ Testando conectividade com query simples...")

        url_simple = f"{DIRECTUS_BASE_URL}/items/versao?limit=5"

        if verbose_mode:
            print(f"üîó URL simples: {url_simple}")
            print(f"üîë Headers: {DIRECTUS_HEADERS}")
            print("   ----")

        simple_response = requests.get(
            url_simple, headers=DIRECTUS_HEADERS, timeout=request_timeout
        )

        if verbose_mode:
            print("üîç Resultado RAW da query simples:")
            print(f"   Status: {simple_response.status_code}")
            print(f"   Response: {simple_response.text}")
            print("   ----")

        # Se a query simples funcionar, tentamos com filtro
        if simple_response.status_code == 200:
            if verbose_mode:
                print("‚úÖ Conectividade OK, tentando query com filtro...")

            # Query com filtros usando query parameters padr√£o do Directus
            url_filtered = f"{DIRECTUS_BASE_URL}/items/versao"

            # Usar array de campos concatenado com v√≠rgula
            fields_array = [
                "id",
                "date_created",
                "status",
                "codigo",
                "contrato.id",
                "contrato.modelo_contrato.arquivo_original",
                "contrato.versoes.arquivo",
                "contrato.versoes.codigo",
                "contrato.versoes.id",
                "contrato.versoes.date_created",
                "arquivo",
            ]

            params = {
                "filter[status][_eq]": "processar",
                "filter[contrato][modelo_contrato][status][_eq]": "publicado",
                "limit": 100,
                "sort": "date_created",
                "fields": ",".join(fields_array),
            }

            if verbose_mode:
                print(f"üîç URL com filtro: {url_filtered}")
                print(f"üîç Params: {params}")
                print("   ----")

            versoes_response = requests.get(
                url_filtered,
                headers=DIRECTUS_HEADERS,
                params=params,
                timeout=request_timeout,
            )

            if verbose_mode:
                print("üîç Resultado RAW da query com filtro:")
                print(f"   Status: {versoes_response.status_code}")
                print(f"   Response: {versoes_response.text}")
                print("   ----")

            if versoes_response.status_code == 200:
                try:
                    response_json = versoes_response.json()
                    versoes = response_json.get("data", [])
                except (ValueError, KeyError):
                    versoes = []
            else:
                versoes = []
        else:
            print("‚ùå Problema de conectividade detectado")
            versoes = []

        print(f"‚úÖ Encontradas {len(versoes)} vers√µes para processar")
        return versoes

    except Exception as e:
        print(f"‚ùå Erro ao buscar vers√µes: {e}")
        return []


def determine_versao_anterior(versao_data):
    """
    Determina a vers√£o anterior mais pr√≥xima baseada na data de cria√ß√£o.

    Args:
        versao_data: Dados da vers√£o atual contendo id, date_created e contrato com vers√µes

    Returns:
        dict ou None: A vers√£o anterior mais pr√≥xima ou None se n√£o existir
    """
    versao_id = versao_data.get("id")
    versao_data_criacao = versao_data.get("date_created", "")

    versao_anterior = max(
        (
            v
            for v in versao_data.get("contrato", {}).get("versoes", [])
            if v["id"] != versao_id and v.get("date_created", "") < versao_data_criacao
        ),
        key=lambda v: v.get("date_created", ""),
        default=None,
    )

    if versao_anterior:
        print(
            f"üìÖ Vers√£o anterior encontrada: ID {versao_anterior['id']} - Data: {versao_anterior['date_created']}"
        )
    else:
        print("‚ö†Ô∏è Nenhuma vers√£o anterior encontrada")

    return versao_anterior


def determine_template_id(versao_data):
    """
    Determina o ID do arquivo original do modelo do contrato a partir dos dados da vers√£o.

    Args:
        versao_data: Dados da vers√£o contendo a estrutura do contrato

    Returns:
        str ou None: O ID do arquivo original do modelo de contrato ou None se n√£o encontrado
    """
    contrato_data = versao_data.get("contrato", {})

    if isinstance(contrato_data, dict):
        modelo_contrato = contrato_data.get("modelo_contrato", {})
        if isinstance(modelo_contrato, dict):
            arquivo_original_id = modelo_contrato.get("arquivo_original")
            if arquivo_original_id:
                print(f"üìÑ arquivo_original encontrado: {arquivo_original_id}")
            else:
                print("‚ö†Ô∏è arquivo_original n√£o encontrado no modelo_contrato")
            return arquivo_original_id
        else:
            print("‚ö†Ô∏è modelo_contrato n√£o √© um dict v√°lido")
            return None
    else:
        print("‚ö†Ô∏è contrato_data n√£o √© um dict v√°lido")
        return None


def determine_original_file_id(versao_data):
    """
    Determina o ID do arquivo original e sua origem.
    Se h√° vers√£o anterior, DEVE ter arquivo (erro se n√£o tiver).
    Se n√£o h√° vers√£o anterior, usa o template do modelo.

    Args:
        versao_data: Dados da vers√£o atual

    Returns:
        tuple: (file_id, source) ou (None, None) se erro
    """
    versao_anterior = determine_versao_anterior(versao_data)

    if versao_anterior:
        # Se existe vers√£o anterior, DEVE ter arquivo
        original_file_id = versao_anterior.get("arquivo")
        if original_file_id:
            print(f"üìÅ Usando arquivo da vers√£o anterior: {original_file_id}")
            return original_file_id, "versao_anterior"
        else:
            print("‚ùå ERRO: Vers√£o anterior encontrada mas sem arquivo v√°lido")
            return None, None

    # Se n√£o h√° vers√£o anterior, usa o template
    template_id: str | None = determine_template_id(versao_data)
    if template_id:
        print("‚ÑπÔ∏è Usando template do modelo de contrato (primeira vers√£o)")
        return template_id, "modelo_contrato"
    else:
        print("‚ùå ERRO: Template do modelo de contrato n√£o encontrado")
        return None, None


def download_file_from_directus(
    file_id: str, cache_dir: str | None = None
) -> tuple[str, Literal["downloaded", "cached"]]:
    """
    Baixa um arquivo do Directus usando o caminho do arquivo.
    Verifica cache para evitar downloads desnecess√°rios.

    Args:
        file_id: ID do arquivo no Directus
        cache_dir: Diret√≥rio para cache (opcional)

    Returns:
        Tuple[str, status]: (caminho_arquivo, status)
        - status: "downloaded" se baixou novo arquivo, "cached" se usou cache
    """
    try:
        download_url = f"{DIRECTUS_BASE_URL}/assets/{file_id}"

        # Verificar cache se diret√≥rio foi fornecido
        if cache_dir:
            os.makedirs(cache_dir, exist_ok=True)
            cached_file_path = os.path.join(cache_dir, f"{file_id}.docx")

            if os.path.exists(cached_file_path):
                # Verificar se arquivo remoto mudou (usando HEAD request)
                head_response = requests.head(
                    download_url, headers=DIRECTUS_HEADERS, timeout=request_timeout
                )

                if head_response.status_code == 200:
                    # Comparar tamanhos ou ETags se dispon√≠vel
                    remote_size = head_response.headers.get("content-length")
                    local_size = str(os.path.getsize(cached_file_path))

                    if remote_size and remote_size == local_size:
                        print(f"üìã Usando arquivo em cache: {cached_file_path}")
                        return cached_file_path, "cached"

        print(f"üì• Baixando arquivo {file_id}, atrav√©s do endere√ßo {download_url}")

        # Fazer o download do arquivo
        response = requests.get(
            download_url, headers=DIRECTUS_HEADERS, timeout=request_timeout
        )

        if response.status_code == 200:
            if cache_dir:
                # Salvar no cache com extens√£o .docx
                file_path = os.path.join(cache_dir, f"{file_id}.docx")
                with open(file_path, "wb") as f:
                    f.write(response.content)
            else:
                # Criar arquivo tempor√°rio com extens√£o .docx
                import tempfile

                with tempfile.NamedTemporaryFile(
                    delete=False, suffix=".docx"
                ) as temp_file:
                    temp_file.write(response.content)
                    file_path = temp_file.name

            print(f"‚úÖ Arquivo baixado: {file_path}")
            return file_path, "downloaded"
        else:
            raise Exception(f"Erro HTTP {response.status_code}: {response.text}")

    except Exception as e:
        raise Exception(f"Erro ao baixar arquivo {file_id}: {e}")


def html_to_text(html_content):
    """Converte HTML para texto limpo"""
    html_content = re.sub(r"<!--.*?-->", "", html_content, flags=re.DOTALL)
    html_content = re.sub(
        r"<strong[^>]*>(.*?)</strong>", r"\1", html_content, flags=re.DOTALL
    )
    html_content = re.sub(r"<b[^>]*>(.*?)</b>", r"\1", html_content, flags=re.DOTALL)
    html_content = re.sub(r"<em[^>]*>(.*?)</em>", r"\1", html_content, flags=re.DOTALL)
    html_content = re.sub(r"<i[^>]*>(.*?)</i>", r"\1", html_content, flags=re.DOTALL)
    html_content = re.sub(r"<u[^>]*>(.*?)</u>", r"\1", html_content, flags=re.DOTALL)
    html_content = re.sub(
        r"<mark[^>]*>(.*?)</mark>", r"\1", html_content, flags=re.DOTALL
    )
    html_content = re.sub(
        r"<li[^>]*><p[^>]*>(.*?)</p></li>", r"‚Ä¢ \1", html_content, flags=re.DOTALL
    )
    html_content = re.sub(
        r"<li[^>]*>(.*?)</li>", r"‚Ä¢ \1", html_content, flags=re.DOTALL
    )
    html_content = re.sub(r"<ol[^>]*>|</ol>", "", html_content)
    html_content = re.sub(r"<ul[^>]*>|</ul>", "", html_content)
    html_content = re.sub(r"<blockquote[^>]*>|</blockquote>", "", html_content)
    html_content = re.sub(r"<p[^>]*>|</p>", "\n", html_content)
    html_content = re.sub(r"<br[^>]*/?>", "\n", html_content)
    html_content = re.sub(r"<[^>]+>", "", html_content)
    html_content = re.sub(r"&nbsp;", " ", html_content)
    html_content = re.sub(r"&amp;", "&", html_content)
    html_content = re.sub(r"&lt;", "<", html_content)
    html_content = re.sub(r"&gt;", ">", html_content)
    html_content = re.sub(r"&quot;", '"', html_content)
    html_content = re.sub(r"\n\s*\n", "\n", html_content)
    return html_content.strip()


def analyze_differences_detailed(original_text, modified_text):
    """Analisa as diferen√ßas e retorna modifica√ß√µes detalhadas"""
    original_lines = original_text.split("\n")
    modified_lines = modified_text.split("\n")

    diff = list(
        difflib.unified_diff(
            original_lines,
            modified_lines,
            fromfile="Original",
            tofile="Modificado",
            lineterm="",
        )
    )

    modifications = []
    modification_count = 1

    i = 0
    while i < len(diff):
        line = diff[i]

        if line.startswith("@@") or line.startswith("---") or line.startswith("+++"):
            i += 1
            continue
        elif line.startswith("-"):
            # Linha removida
            original_content = line[1:].strip()
            if original_content:  # Ignorar linhas vazias
                # Verificar se a pr√≥xima linha √© uma adi√ß√£o (modifica√ß√£o)
                if i + 1 < len(diff) and diff[i + 1].startswith("+"):
                    modified_content = diff[i + 1][1:].strip()
                    modifications.append(
                        {
                            "categoria": "modificacao",
                            "conteudo": original_content,
                            "alteracao": modified_content,
                            "sort": modification_count,
                        }
                    )
                    i += 2  # Pular a pr√≥xima linha pois j√° processamos
                else:
                    # Apenas remo√ß√£o
                    modifications.append(
                        {
                            "categoria": "remocao",
                            "conteudo": original_content,
                            "alteracao": "",
                            "sort": modification_count,
                        }
                    )
                    i += 1
                modification_count += 1
        elif line.startswith("+"):
            # Linha adicionada (que n√£o foi processada como modifica√ß√£o)
            added_content = line[1:].strip()
            if added_content:  # Ignorar linhas vazias
                modifications.append(
                    {
                        "categoria": "adicao",
                        "conteudo": "",
                        "alteracao": added_content,
                        "sort": modification_count,
                    }
                )
                modification_count += 1
            i += 1
        else:
            i += 1

    return modifications


def upload_file_to_directus(file_path, filename=None, dry_run=False):
    """
    Faz upload de um arquivo para o Directus e retorna o ID do arquivo
    """
    try:
        if not filename:
            filename = os.path.basename(file_path)

        print(f"üì§ Fazendo upload do arquivo {filename} para o Directus...")

        if dry_run:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: N√£o executando upload real para o Directus")
            return f"mock-file-id-{uuid.uuid4()}"

        # Endpoint para upload de arquivos no Directus
        upload_url = f"{DIRECTUS_BASE_URL}/files"

        # Preparar o arquivo para upload
        with open(file_path, "rb") as file:
            files = {"file": (filename, file, "text/html")}

            # Headers sem Content-Type para upload de arquivo
            upload_headers = {"Authorization": f"Bearer {DIRECTUS_TOKEN}"}

            # Fazer o upload
            response = requests.post(
                upload_url, headers=upload_headers, files=files, timeout=request_timeout
            )

            if response.status_code == 200:
                file_data = response.json().get("data", {})
                file_id = file_data.get("id")

                if file_id:
                    print(f"‚úÖ Arquivo enviado com sucesso! ID: {file_id}")
                    return file_id
                else:
                    raise Exception("Resposta do upload n√£o cont√©m ID do arquivo")
            else:
                raise Exception(f"Erro HTTP {response.status_code}: {response.text}")

    except Exception as e:
        print(f"‚ùå Erro ao fazer upload do arquivo: {e}")
        return None


def update_versao_status(
    versao_id,
    status,
    modifica_arquivo=None,
    result_url=None,
    total_modifications=0,
    error_message=None,
    modifications=None,
    result_file_path=None,
    dry_run=False,
):
    """Atualiza o status da vers√£o, adiciona observa√ß√µes, salva modifica√ß√µes e faz upload do relat√≥rio HTML"""
    try:
        print(f"üìù Atualizando status da vers√£o {versao_id} para '{status}'...")

        # Upload do arquivo HTML se fornecido e status for conclu√≠do
        relatorio_diff_id = None
        if (
            result_file_path
            and status == "concluido"
            and os.path.exists(result_file_path)
        ):
            filename = f"relatorio_diff_{versao_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            relatorio_diff_id = upload_file_to_directus(
                result_file_path, filename, dry_run
            )

            if relatorio_diff_id:
                print(
                    f"‚úÖ Relat√≥rio HTML enviado para o Directus com ID: {relatorio_diff_id}"
                )
                # Atualizar URL do resultado para usar o Directus
                result_url = f"{DIRECTUS_BASE_URL}/assets/{relatorio_diff_id}"
            else:
                print("‚ùå Falha no upload do relat√≥rio HTML")

        if status == "concluido":
            observacao = (
                f"Compara√ß√£o conclu√≠da em {datetime.now().strftime('%d/%m/%Y %H:%M')}. "
                f"Total de modifica√ß√µes encontradas: {total_modifications}. "
                f"Resultado dispon√≠vel em: {result_url}"
            )
        elif status == "erro":
            observacao = f"Erro no processamento em {datetime.now().strftime('%d/%m/%Y %H:%M')}: {error_message}"
        else:
            observacao = f"Status atualizado para '{status}' em {datetime.now().strftime('%d/%m/%Y %H:%M')}"

        update_data = {"status": status, "observacao": observacao}

        # Adicionar ID do arquivo original se fornecido
        if modifica_arquivo:
            update_data["modifica_arquivo"] = modifica_arquivo
            print(
                f"üìÑ Incluindo arquivo original no campo modifica_arquivo: {modifica_arquivo}"
            )

        # Adicionar ID do relat√≥rio se dispon√≠vel
        if relatorio_diff_id:
            update_data["relatorio_diff"] = relatorio_diff_id
            print(
                f"üìÑ Incluindo relat√≥rio HTML no campo relatorio_diff: {relatorio_diff_id}"
            )

        # Se h√° modifica√ß√µes para salvar, incluir no update_data
        if modifications and status == "concluido":
            print(f"üíæ Incluindo {len(modifications)} modifica√ß√µes na transa√ß√£o...")

            # Preparar dados das modifica√ß√µes
            modifications_data = []
            for mod in modifications:
                modification_data = {
                    "versao": versao_id,
                    "categoria": mod["categoria"],
                    "conteudo": mod["conteudo"],
                    "alteracao": mod["alteracao"],
                    "sort": mod["sort"],
                    "status": "draft",
                }
                modifications_data.append(modification_data)

            update_data["modificacoes"] = modifications_data
            print(
                f"‚úÖ {len(modifications_data)} modifica√ß√µes preparadas para salvar em uma √∫nica transa√ß√£o"
            )

        if dry_run:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: N√£o executando atualiza√ß√£o no Directus")
            print(f"   Status: {update_data['status']}")
            print(f"   Observa√ß√£o: {update_data['observacao']}")
            if relatorio_diff_id:
                print(f"   Relat√≥rio HTML: {relatorio_diff_id} (n√£o salvo)")
            if modifications and status == "concluido":
                print(f"   Modifica√ß√µes: {len(modifications)} itens (n√£o salvos)")
            return {"id": versao_id, "status": status, "observacao": observacao}

        # Atualizar vers√£o usando HTTP request direto
        try:
            update_url = f"{DIRECTUS_BASE_URL}/items/versao/{versao_id}"
            response = requests.patch(
                update_url,
                headers=DIRECTUS_HEADERS,
                json=update_data,
                timeout=request_timeout,
            )

            if response.status_code == 200:
                updated_versao = response.json().get("data", {})
                if relatorio_diff_id:
                    print(
                        f"‚úÖ Vers√£o atualizada com status '{status}', relat√≥rio HTML ID {relatorio_diff_id}, e {len(modifications) if modifications else 0} modifica√ß√µes"
                    )
                elif modifications and status == "concluido":
                    print(
                        f"‚úÖ Vers√£o atualizada com status '{status}' e {len(modifications)} modifica√ß√µes salvas em uma √∫nica transa√ß√£o"
                    )
                else:
                    print(f"‚úÖ Vers√£o atualizada com status '{status}'")
                return updated_versao
            else:
                print(
                    f"‚ùå Erro ao atualizar vers√£o: HTTP {response.status_code} - {response.text}"
                )
                return None
        except Exception as e:
            print(f"‚ùå Erro ao atualizar vers√£o: {e}")
            return None

    except Exception as e:
        print(f"‚ùå Erro ao atualizar vers√£o: {e}")
        return None


def processar_versao(versao_data, dry_run=False):
    """
    Processa uma vers√£o espec√≠fica
    """
    versao_id = versao_data["id"]
    original_file_id = None  # Inicializar para uso no tratamento de erro

    try:
        if dry_run:
            print(f"\nüèÉ‚Äç‚ôÇÔ∏è DRY-RUN: Analisando vers√£o {versao_id} (sem altera√ß√µes)")
        else:
            print(f"\nüöÄ Processando vers√£o {versao_id}")

        # Atualizar status para 'processando' (apenas se n√£o for dry-run)
        if not dry_run:
            update_versao_status(
                versao_id,
                "processando",
                modifica_arquivo=None,
                result_url=None,
                total_modifications=0,
                error_message=None,
                modifications=None,
                result_file_path=None,
                dry_run=dry_run,
            )
        else:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: Pulando atualiza√ß√£o de status para 'processando'")

        # 1. Determinar arquivo original e modificado
        original_file_id, original_source = determine_original_file_id(versao_data)
        modificado_file_id = versao_data.get("arquivo")

        if not original_file_id or not modificado_file_id:
            raise Exception("IDs de arquivo original ou modificado n√£o encontrados")

        print(f"üìÅ Original: {original_file_id} (fonte: {original_source})")
        print(f"üìÑ Modificado: {modificado_file_id}")

        # 2. Baixar arquivos
        original_path, _ = download_file_from_directus(original_file_id)
        modified_path, _ = download_file_from_directus(modificado_file_id)

        try:
            # 3. Gerar compara√ß√£o HTML usando a fun√ß√£o interna em vez do CLI
            result_id = str(uuid.uuid4())
            result_filename = f"comparison_{result_id}.html"
            result_path = os.path.join(RESULTS_DIR, result_filename)

            print("üîÑ Executando compara√ß√£o visual usando fun√ß√£o interna...")

            # Usar a fun√ß√£o do docx_diff_viewer diretamente
            from src.docx_compare.core.docx_diff_viewer import generate_diff_html

            try:
                print(
                    f"üîç Analisando: {os.path.basename(original_path)} vs {os.path.basename(modified_path)}"
                )
                stats = generate_diff_html(original_path, modified_path, result_path)
                print(f"‚úÖ Compara√ß√£o visual conclu√≠da: {stats}")
            except Exception as e:
                print(f"‚ùå Erro na compara√ß√£o visual: {e}")
                raise Exception(f"Erro na compara√ß√£o: {e}")

            # 4. Converter documentos para an√°lise textual
            print("üìä Analisando diferen√ßas textuais...")

            # Converter para HTML tempor√°rio para an√°lise
            with tempfile.NamedTemporaryFile(
                mode="w", suffix=".html", delete=False
            ) as original_html_temp:
                original_html_temp_name = original_html_temp.name

            with tempfile.NamedTemporaryFile(
                mode="w", suffix=".html", delete=False
            ) as modified_html_temp:
                modified_html_temp_name = modified_html_temp.name

            # Converter usando pandoc
            subprocess.run(
                ["pandoc", original_path, "-o", original_html_temp_name], check=True
            )
            subprocess.run(
                ["pandoc", modified_path, "-o", modified_html_temp_name], check=True
            )

            # Ler e processar HTML
            with open(original_html_temp_name, encoding="utf-8") as f:
                original_html = f.read()
            with open(modified_html_temp_name, encoding="utf-8") as f:
                modified_html = f.read()

            # Converter para texto limpo
            original_text = html_to_text(original_html)
            modified_text = html_to_text(modified_html)

            # Analisar diferen√ßas
            modifications = analyze_differences_detailed(original_text, modified_text)

            # 5. Atualizar status da vers√£o para conclu√≠do e salvar modifica√ß√µes em uma √∫nica transa√ß√£o
            result_url = f"http://{FLASK_HOST}:{FLASK_PORT}/results/{result_filename}"
            update_versao_status(
                versao_id,
                "concluido",
                modifica_arquivo=original_file_id,
                result_url=result_url,
                total_modifications=len(modifications),
                modifications=modifications,
                result_file_path=result_path,
                dry_run=dry_run,
            )

            print(
                f"‚úÖ Vers√£o {versao_id} processada com sucesso! {len(modifications)} modifica√ß√µes encontradas"
            )

            # Limpar arquivos tempor√°rios de an√°lise
            for temp_file in [original_html_temp_name, modified_html_temp_name]:
                with contextlib.suppress(builtins.BaseException):
                    os.unlink(temp_file)

        finally:
            # Limpar arquivos tempor√°rios principais
            for temp_file in [original_path, modified_path]:
                try:
                    if os.path.exists(temp_file):
                        os.unlink(temp_file)
                except OSError:
                    pass

    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå Erro ao processar vers√£o {versao_id}: {error_msg}")
        if not dry_run:
            update_versao_status(
                versao_id,
                "erro",
                modifica_arquivo=original_file_id,
                error_message=error_msg,
            )
        else:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: N√£o atualizando status de erro no Directus")


def processar_ciclo_unico(dry_run=False):
    """Executa um √∫nico ciclo de processamento"""
    try:
        print(
            f"üîç {datetime.now().strftime('%H:%M:%S')} - Buscando vers√µes para processar..."
        )

        # Buscar vers√µes para processar
        versoes = buscar_versoes_para_processar()

        if versoes:
            print(f"‚úÖ Encontradas {len(versoes)} vers√µes para processar")

            # Processar cada vers√£o encontrada
            for versao in versoes:
                processar_versao(versao, dry_run)

            print(f"üéØ Processamento completado: {len(versoes)} vers√µes processadas")
        else:
            status_msg = "DRY-RUN" if dry_run else "Normal"
            print(f"üò¥ Nenhuma vers√£o para processar ({status_msg})")

    except Exception as e:
        print(f"‚ùå Erro no processamento: {e}")
        raise


def loop_processador(dry_run=False):
    """
    Loop principal do processador autom√°tico
    """
    global ultima_verificacao

    mode_text = []
    if dry_run:
        mode_text.append("DRY-RUN")
    if verbose_mode:
        mode_text.append("VERBOSE")

    mode_suffix = f" ({', '.join(mode_text)})" if mode_text else ""
    print(f"üîÑ Processador autom√°tico iniciado{mode_suffix}!")

    while processador_ativo:
        try:
            # Registrar hor√°rio da verifica√ß√£o
            ultima_verificacao = datetime.now()

            # Buscar vers√µes para processar
            versoes = buscar_versoes_para_processar()

            # Processar cada vers√£o encontrada
            for versao in versoes:
                if not processador_ativo:
                    break
                processar_versao(versao, dry_run)

            if not versoes:
                status_msg = "DRY-RUN" if dry_run else "Normal"
                print(
                    f"üò¥ {datetime.now().strftime('%H:%M:%S')} - Nenhuma vers√£o para processar ({status_msg})"
                )

        except Exception as e:
            print(f"‚ùå Erro no loop do processador: {e}")

        # Aguardar intervalo configurado antes da pr√≥xima verifica√ß√£o
        # Dividir em intervalos menores para ser mais responsivo aos sinais
        if processador_ativo:
            for _ in range(
                check_interval
            ):  # check_interval segundos divididos em intervalos de 1 segundo
                if not processador_ativo:
                    break
                time.sleep(1)

    print("üîÑ Loop do processador finalizado")


# Endpoints da API para monitoramento
@app.route("/health", methods=["GET"])
def health():
    """Verifica√ß√£o de sa√∫de"""
    return jsonify(
        {
            "status": "healthy",
            "processador_ativo": processador_ativo,
            "timestamp": datetime.now().isoformat(),
        }
    )


@app.route("/status", methods=["GET"])
def status():
    """Status do processador"""
    return jsonify(
        {
            "processador_ativo": processador_ativo,
            "directus_url": DIRECTUS_BASE_URL,
            "results_dir": RESULTS_DIR,
            "timestamp": datetime.now().isoformat(),
        }
    )


@app.route("/results/<path:filename>", methods=["GET"])
def serve_result(filename):
    """Serve arquivos de resultado HTML."""
    try:
        return send_from_directory(RESULTS_DIR, filename)
    except FileNotFoundError:
        return jsonify({"error": "Arquivo n√£o encontrado"}), 404


@app.route("/metrics", methods=["GET"])
def metrics():
    """M√©tricas b√°sicas do processador"""
    try:
        # Contar arquivos de resultado
        result_files = os.listdir(RESULTS_DIR) if os.path.exists(RESULTS_DIR) else []
        html_files = [f for f in result_files if f.endswith(".html")]

        # Calcular pr√≥xima verifica√ß√£o
        proxima_verificacao = None
        if ultima_verificacao and processador_ativo:
            from datetime import timedelta

            proxima_verificacao = (
                ultima_verificacao + timedelta(seconds=check_interval)
            ).isoformat()

        # Informa√ß√µes b√°sicas
        return jsonify(
            {
                "processador_ativo": processador_ativo,
                "directus_url": DIRECTUS_BASE_URL,
                "results_dir": RESULTS_DIR,
                "total_result_files": len(html_files),
                "check_interval": check_interval,
                "request_timeout": request_timeout,
                "verbose_mode": verbose_mode,
                "ultima_verificacao": ultima_verificacao.isoformat()
                if ultima_verificacao
                else None,
                "proxima_verificacao": proxima_verificacao,
                "timestamp": datetime.now().isoformat(),
            }
        )
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/results", methods=["GET"])
def list_results():
    """Lista todos os arquivos de resultado dispon√≠veis"""
    try:
        if not os.path.exists(RESULTS_DIR):
            return jsonify({"results": []})

        result_files = os.listdir(RESULTS_DIR)
        html_files = [f for f in result_files if f.endswith(".html")]

        results = []
        for filename in sorted(html_files, reverse=True):  # Mais recentes primeiro
            file_path = os.path.join(RESULTS_DIR, filename)
            if os.path.exists(file_path):
                stat = os.stat(file_path)
                results.append(
                    {
                        "filename": filename,
                        "size": stat.st_size,
                        "created": datetime.fromtimestamp(stat.st_ctime).isoformat(),
                        "modified": datetime.fromtimestamp(stat.st_mtime).isoformat(),
                        "url": f"/results/{filename}",
                    }
                )

        return jsonify(
            {
                "total": len(results),
                "results": results,
                "timestamp": datetime.now().isoformat(),
            }
        )
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/", methods=["GET"])
def index():
    """P√°gina inicial com informa√ß√µes do sistema"""
    try:
        # Calcular hor√°rio da pr√≥xima verifica√ß√£o
        proxima_verificacao_texto = "N√£o dispon√≠vel"
        if ultima_verificacao and processador_ativo:
            from datetime import timedelta

            proxima_verificacao = ultima_verificacao + timedelta(seconds=check_interval)
            proxima_verificacao_texto = proxima_verificacao.strftime("%H:%M:%S")
        elif processador_ativo:
            proxima_verificacao_texto = "Em breve (primeira verifica√ß√£o)"

        # Retornar HTML simples para facilitar visualiza√ß√£o
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>DOCX Compare - Processador Autom√°tico</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }}
                .status {{ color: {"green" if processador_ativo else "red"}; }}
                .endpoint {{ background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 4px; }}
                .code {{ font-family: monospace; background: #e8e8e8; padding: 2px 6px; border-radius: 3px; }}
            </style>
        </head>
        <body>
            <h1>üöÄ DOCX Compare - Processador Autom√°tico</h1>
            <p><strong>Status:</strong> <span class="status">{"üü¢ Ativo" if processador_ativo else "üî¥ Parado"}</span></p>
            <p><strong>Directus:</strong> <span class="code">{DIRECTUS_BASE_URL}</span></p>
            <p><strong>Intervalo de verifica√ß√£o:</strong> {check_interval}s</p>
            <p><strong>Pr√≥xima verifica√ß√£o:</strong> {proxima_verificacao_texto}</p>

            <h2>üìã Endpoints Dispon√≠veis</h2>
            <div class="endpoint"><strong>GET /health</strong> - Verifica√ß√£o de sa√∫de</div>
            <div class="endpoint"><strong>GET /status</strong> - Status detalhado do processador</div>
            <div class="endpoint"><strong>GET /metrics</strong> - M√©tricas do sistema</div>
            <div class="endpoint"><strong>GET /results</strong> - Lista de resultados processados</div>
            <div class="endpoint"><strong>GET /results/&lt;filename&gt;</strong> - Visualizar resultado espec√≠fico</div>

            <h2>‚ÑπÔ∏è Informa√ß√µes</h2>
            <p>Este servi√ßo monitora automaticamente o Directus em busca de vers√µes com status "processar" e gera compara√ß√µes visuais entre documentos.</p>
            <p><strong>√öltima atualiza√ß√£o:</strong> {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}</p>
        </body>
        </html>
        """

        return html
    except Exception as e:
        return jsonify({"error": str(e)}), 500


def create_arg_parser():
    """Criar parser de argumentos da linha de comando"""
    parser = argparse.ArgumentParser(
        description="Processador autom√°tico de vers√µes",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Executar em modo de an√°lise sem modificar registros no Directus",
    )

    parser.add_argument(
        "--single-run",
        action="store_true",
        help="Executar apenas um ciclo de processamento e encerrar",
    )

    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="Ativar modo verbose com logs detalhados das consultas HTTP",
    )

    parser.add_argument(
        "--interval",
        "-i",
        type=int,
        default=60,
        help="Intervalo de verifica√ß√£o em segundos (padr√£o: 60s)",
    )

    parser.add_argument(
        "--timeout",
        "-t",
        type=int,
        default=30,
        help="Timeout das requisi√ß√µes HTTP em segundos (padr√£o: 30s)",
    )

    parser.add_argument(
        "--host",
        default=FLASK_HOST,
        help=f"Host para o servidor Flask de monitoramento (padr√£o: {FLASK_HOST})",
    )

    parser.add_argument(
        "--port",
        type=int,
        default=FLASK_PORT,
        help=f"Porta para o servidor Flask de monitoramento (padr√£o: {FLASK_PORT})",
    )

    return parser


def init_application():
    """Inicializa a aplica√ß√£o com configura√ß√µes padr√£o"""
    global verbose_mode, check_interval, request_timeout

    # Configura√ß√µes padr√£o para produ√ß√£o
    verbose_mode = os.getenv("VERBOSE_MODE", "false").lower() == "true"
    check_interval = int(os.getenv("CHECK_INTERVAL", "60"))
    request_timeout = int(os.getenv("REQUEST_TIMEOUT", "30"))

    # Registrar handlers de sinais para encerramento gracioso
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # Comando kill
    if hasattr(signal, "SIGHUP"):
        signal.signal(signal.SIGHUP, signal_handler)  # Hang up


if __name__ == "__main__":
    # Configurar argumentos da linha de comando
    parser = create_arg_parser()
    args = parser.parse_args()

    # Configurar vari√°veis globais
    verbose_mode = args.verbose
    check_interval = args.interval
    request_timeout = args.timeout

    # Registrar handlers de sinais para encerramento gracioso
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # Comando kill
    if hasattr(signal, "SIGHUP"):
        signal.signal(signal.SIGHUP, signal_handler)  # Hang up

    print("üöÄ Processador Autom√°tico de Vers√µes")
    print(f"üìÅ Resultados salvos em: {RESULTS_DIR}")
    print(f"üîó Directus: {DIRECTUS_BASE_URL}")

    if not args.single_run:
        print(f"üåê Servidor de monitoramento: http://{args.host}:{args.port}")
        print(f"‚è∞ Verifica√ß√£o autom√°tica a cada {args.interval} segundos")

    print(f"‚è±Ô∏è  Timeout de requisi√ß√µes: {args.timeout} segundos")
    print("üîí Monitoramento de sinais ativo (SIGINT, SIGTERM, SIGHUP)")

    mode_flags = []
    if args.dry_run:
        mode_flags.append("DRY-RUN (sem altera√ß√µes no banco)")
    if args.verbose:
        mode_flags.append("VERBOSE (logs detalhados)")
    if args.single_run:
        mode_flags.append("SINGLE-RUN (execu√ß√£o √∫nica)")

    if mode_flags:
        print(f"üèÉ‚Äç‚ôÇÔ∏è Modo: {' + '.join(mode_flags)}")

    if args.single_run:
        print("\nüéØ Executando ciclo √∫nico...")
        processar_ciclo_unico(args.dry_run)
        print("‚úÖ Execu√ß√£o √∫nica completada")
        sys.exit(0)  # Encerrar aqui no modo single-run
    else:
        print("")
        print("üìã Endpoints de monitoramento:")
        print("  ‚Ä¢ GET  /health - Verifica√ß√£o de sa√∫de")
        print("  ‚Ä¢ GET  /status - Status do processador")
        print("  ‚Ä¢ GET  /results/<filename> - Visualizar resultados")
        print("")

    # Verificar se deve usar servidor de produ√ß√£o
    if args.dry_run or args.verbose or args.interval != 60 or args.timeout != 30:
        # Modo desenvolvimento/debug - usar Flask development server
        print("üîß Modo desenvolvimento detectado - usando Flask dev server")

        # Iniciar o processador em uma thread separada
        processador_thread = threading.Thread(
            target=lambda: loop_processador(args.dry_run), daemon=True
        )
        processador_thread.start()

        # Iniciar o servidor Flask para monitoramento
        try:
            app.run(host=args.host, port=args.port, debug=True)
        except KeyboardInterrupt:
            print("\nüõë Parando processador...")
            processador_ativo = False
            print("‚úÖ Processador parado!")
    else:
        # Modo produ√ß√£o - sugerir Gunicorn
        print("üöÄ Para produ√ß√£o, use:")
        print("   gunicorn -c gunicorn.conf.py wsgi:app")
        print("   ou")
        print(
            "   docker build -t docx-compare . && docker run -p 5005:5005 docx-compare"
        )

        # Executar mesmo assim em desenvolvimento
        init_application()

        # Iniciar o processador em uma thread separada
        processador_thread = threading.Thread(
            target=lambda: loop_processador(args.dry_run), daemon=True
        )
        processador_thread.start()

        try:
            app.run(host=args.host, port=args.port, debug=True)
        except KeyboardInterrupt:
            print("\nüõë Parando processador...")
            processador_ativo = False
            print("‚úÖ Processador parado!")
else:
    # Quando importado (para Gunicorn), inicializar configura√ß√µes
    init_application()

#!/usr/bin/env python3
"""
Utilidades para integra√ß√£o com Directus
M√≥dulo comum para evitar duplica√ß√£o de c√≥digo entre os arquivos do projeto
"""

import os
import tempfile
import uuid
from datetime import datetime
from typing import Literal

import requests
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes
DIRECTUS_BASE_URL = (
    os.getenv("DIRECTUS_BASE_URL", "https://contract.devix.co")
    .replace("/admin/", "")
    .rstrip("/")
)
DIRECTUS_TOKEN = os.getenv("DIRECTUS_TOKEN", "your-directus-token")

# Headers para requisi√ß√µes HTTP
DIRECTUS_HEADERS = {
    "Authorization": f"Bearer {DIRECTUS_TOKEN}",
    "Content-Type": "application/json",
}

# Timeout padr√£o para requisi√ß√µes
DEFAULT_REQUEST_TIMEOUT = 30


def buscar_versoes_para_processar(
    verbose_mode=False, request_timeout=DEFAULT_REQUEST_TIMEOUT
):
    """
    Busca vers√µes com status 'processar' no Directus usando requisi√ß√µes HTTP diretas
    """
    try:
        print(
            f"üîç {datetime.now().strftime('%H:%M:%S')} - Buscando vers√µes para processar..."
        )

        # Primeiro, vamos testar uma query simples sem filtros
        if verbose_mode:
            print("üß™ Testando conectividade com query simples...")

        url_simple = f"{DIRECTUS_BASE_URL}/items/versao?limit=5"

        if verbose_mode:
            print(f"üîó URL simples: {url_simple}")
            print(f"üîë Headers: {DIRECTUS_HEADERS}")
            print("   ----")

        simple_response = requests.get(
            url_simple, headers=DIRECTUS_HEADERS, timeout=request_timeout
        )

        if verbose_mode:
            print("üîç Resultado RAW da query simples:")
            print(f"   Status: {simple_response.status_code}")
            print(f"   Response: {simple_response.text}")
            print("   ----")

        # Se a query simples funcionar, tentamos com filtro
        if simple_response.status_code == 200:
            if verbose_mode:
                print("‚úÖ Conectividade OK, tentando query com filtro...")

            # Query com filtros usando query parameters - campos corretos
            url_filtered = f"{DIRECTUS_BASE_URL}/items/versao"

            # Usar array de campos concatenado com v√≠rgula
            fields_array = [
                "id",
                "date_created",
                "status",
                "codigo",
                "contrato.id",
                "contrato.modelo_contrato.arquivo_original",
                "contrato.versoes.arquivo",
                "contrato.versoes.codigo",
                "contrato.versoes.id",
                "contrato.versoes.date_created",
                "arquivo",
            ]

            params = {
                "filter[status][_eq]": "processar",
                "limit": 10,
                "sort": "date_created",
                "fields": ",".join(fields_array),
            }

            if verbose_mode:
                print(f"üîç URL com filtro: {url_filtered}")
                print(f"üîç Params: {params}")
                print("   ----")

            versoes_response = requests.get(
                url_filtered,
                headers=DIRECTUS_HEADERS,
                params=params,
                timeout=request_timeout,
            )

            if verbose_mode:
                print("üîç Resultado RAW da query com filtro:")
                print(f"   Status: {versoes_response.status_code}")
                print(f"   Response: {versoes_response.text}")
                print("   ----")

            if versoes_response.status_code == 200:
                try:
                    response_json = versoes_response.json()
                    versoes = response_json.get("data", [])
                except (ValueError, KeyError):
                    versoes = []
            else:
                versoes = []
        else:
            print("‚ùå Problema de conectividade detectado")
            versoes = []

        print(f"‚úÖ Encontradas {len(versoes)} vers√µes para processar")
        return versoes

    except Exception as e:
        print(f"‚ùå Erro ao buscar vers√µes: {e}")
        return []


def determine_versao_anterior(versao_data):
    """
    Determina a vers√£o anterior mais pr√≥xima baseada na data de cria√ß√£o.

    Args:
        versao_data: Dados da vers√£o atual contendo id, date_created e contrato com vers√µes

    Returns:
        dict ou None: A vers√£o anterior mais pr√≥xima ou None se n√£o existir
    """
    versao_id = versao_data.get("id")
    versao_data_criacao = versao_data.get("date_created", "")

    versao_anterior = max(
        (
            v
            for v in versao_data.get("contrato", {}).get("versoes", [])
            if v["id"] != versao_id and v.get("date_created", "") < versao_data_criacao
        ),
        key=lambda v: v.get("date_created", ""),
        default=None,
    )

    if versao_anterior:
        print(
            f"üìÖ Vers√£o anterior encontrada: ID {versao_anterior['id']} - Data: {versao_anterior['date_created']}"
        )
    else:
        print("‚ö†Ô∏è Nenhuma vers√£o anterior encontrada")

    return versao_anterior


def determine_template_id(versao_data):
    """
    Determina o ID do arquivo original do modelo do contrato a partir dos dados da vers√£o.

    Args:
        versao_data: Dados da vers√£o contendo a estrutura do contrato

    Returns:
        str ou None: O ID do arquivo original do modelo de contrato ou None se n√£o encontrado
    """
    contrato_data = versao_data.get("contrato", {})

    if isinstance(contrato_data, dict):
        modelo_contrato = contrato_data.get("modelo_contrato", {})
        if isinstance(modelo_contrato, dict):
            arquivo_original_id = modelo_contrato.get("arquivo_original")
            if arquivo_original_id:
                print(f"üìÑ arquivo_original encontrado: {arquivo_original_id}")
            else:
                print("‚ö†Ô∏è arquivo_original n√£o encontrado no modelo_contrato")
            return arquivo_original_id
        else:
            print("‚ö†Ô∏è modelo_contrato n√£o √© um dict v√°lido")
            return None
    else:
        print("‚ö†Ô∏è contrato_data n√£o √© um dict v√°lido")
        return None


def determine_original_file_id(versao_data):
    """
    Determina o ID do arquivo original e sua origem.
    Se h√° vers√£o anterior, DEVE ter arquivo (erro se n√£o tiver).
    Se n√£o h√° vers√£o anterior, usa o template do modelo.

    Args:
        versao_data: Dados da vers√£o atual

    Returns:
        tuple: (file_id, source) ou (None, None) se erro
    """
    versao_anterior = determine_versao_anterior(versao_data)

    if versao_anterior:
        # Se existe vers√£o anterior, DEVE ter arquivo
        original_file_id = versao_anterior.get("arquivo")
        if original_file_id:
            print(f"üìÅ Usando arquivo da vers√£o anterior: {original_file_id}")
            return original_file_id, "versao_anterior"
        else:
            print("‚ùå ERRO: Vers√£o anterior encontrada mas sem arquivo v√°lido")
            return None, None

    # Se n√£o h√° vers√£o anterior, usa o template
    template_id: str | None = determine_template_id(versao_data)
    if template_id:
        print("‚ÑπÔ∏è Usando template do modelo de contrato (primeira vers√£o)")
        return template_id, "modelo_contrato"
    else:
        print("‚ùå ERRO: Template do modelo de contrato n√£o encontrado")
        return None, None


def download_file_from_directus(
    file_id: str,
    cache_dir: str | None = None,
    request_timeout: int = DEFAULT_REQUEST_TIMEOUT,
) -> tuple[str, Literal["downloaded", "cached"]]:
    """
    Baixa um arquivo do Directus usando o caminho do arquivo.
    Verifica cache para evitar downloads desnecess√°rios.

    Args:
        file_id: ID do arquivo no Directus
        cache_dir: Diret√≥rio para cache (opcional)
        request_timeout: Timeout das requisi√ß√µes em segundos

    Returns:
        Tuple[str, status]: (caminho_arquivo, status)
        - status: "downloaded" se baixou novo arquivo, "cached" se usou cache
    """
    try:
        download_url = f"{DIRECTUS_BASE_URL}/assets/{file_id}"

        # Verificar cache se diret√≥rio foi fornecido
        if cache_dir:
            os.makedirs(cache_dir, exist_ok=True)
            cached_file_path = os.path.join(cache_dir, f"{file_id}.docx")

            if os.path.exists(cached_file_path):
                # Verificar se arquivo remoto mudou (usando HEAD request)
                head_response = requests.head(
                    download_url, headers=DIRECTUS_HEADERS, timeout=request_timeout
                )

                if head_response.status_code == 200:
                    # Comparar tamanhos ou ETags se dispon√≠vel
                    remote_size = head_response.headers.get("content-length")
                    local_size = str(os.path.getsize(cached_file_path))

                    if remote_size and remote_size == local_size:
                        print(f"üìã Usando arquivo em cache: {cached_file_path}")
                        return cached_file_path, "cached"

        print(f"üì• Baixando arquivo {file_id}, atrav√©s do endere√ßo {download_url}")

        # Fazer o download do arquivo
        response = requests.get(
            download_url, headers=DIRECTUS_HEADERS, timeout=request_timeout
        )

        if response.status_code == 200:
            if cache_dir:
                # Salvar no cache com extens√£o .docx
                file_path = os.path.join(cache_dir, f"{file_id}.docx")
                with open(file_path, "wb") as f:
                    f.write(response.content)
            else:
                # Criar arquivo tempor√°rio com extens√£o .docx
                with tempfile.NamedTemporaryFile(
                    delete=False, suffix=".docx"
                ) as temp_file:
                    temp_file.write(response.content)
                    file_path = temp_file.name

            print(f"‚úÖ Arquivo baixado: {file_path}")
            return file_path, "downloaded"
        else:
            raise Exception(f"Erro HTTP {response.status_code}: {response.text}")

    except Exception as e:
        raise Exception(f"Erro ao baixar arquivo {file_id}: {e}")


def upload_file_to_directus(
    file_path,
    filename=None,
    dry_run=False,
    request_timeout: int = DEFAULT_REQUEST_TIMEOUT,
):
    """
    Faz upload de um arquivo para o Directus e retorna o ID do arquivo
    """
    try:
        if not filename:
            filename = os.path.basename(file_path)

        print(f"üì§ Fazendo upload do arquivo {filename} para o Directus...")

        if dry_run:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: N√£o executando upload real para o Directus")
            return f"mock-file-id-{uuid.uuid4()}"

        # Endpoint para upload de arquivos no Directus
        upload_url = f"{DIRECTUS_BASE_URL}/files"

        # Preparar o arquivo para upload
        with open(file_path, "rb") as file:
            files = {"file": (filename, file, "text/html")}

            # Headers sem Content-Type para upload de arquivo
            upload_headers = {"Authorization": f"Bearer {DIRECTUS_TOKEN}"}

            # Fazer o upload
            response = requests.post(
                upload_url, headers=upload_headers, files=files, timeout=request_timeout
            )

            if response.status_code == 200:
                file_data = response.json().get("data", {})
                file_id = file_data.get("id")

                if file_id:
                    print(f"‚úÖ Arquivo enviado com sucesso! ID: {file_id}")
                    return file_id
                else:
                    raise Exception("Resposta do upload n√£o cont√©m ID do arquivo")
            else:
                raise Exception(f"Erro HTTP {response.status_code}: {response.text}")

    except Exception as e:
        print(f"‚ùå Erro ao fazer upload do arquivo: {e}")
        return None


def update_versao_status(
    versao_id,
    status,
    modifica_arquivo=None,
    result_url=None,
    total_modifications=0,
    error_message=None,
    modifications=None,
    result_file_path=None,
    dry_run=False,
    request_timeout: int = DEFAULT_REQUEST_TIMEOUT,
):
    """Atualiza o status da vers√£o, adiciona observa√ß√µes, salva modifica√ß√µes e faz upload do relat√≥rio HTML"""
    try:
        print(f"üìù Atualizando status da vers√£o {versao_id} para '{status}'...")

        # Upload do arquivo HTML se fornecido e status for conclu√≠do
        relatorio_diff_id = None
        if (
            result_file_path
            and status == "concluido"
            and os.path.exists(result_file_path)
        ):
            filename = f"relatorio_diff_{versao_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
            relatorio_diff_id = upload_file_to_directus(
                result_file_path, filename, dry_run, request_timeout
            )

            if relatorio_diff_id:
                print(
                    f"‚úÖ Relat√≥rio HTML enviado para o Directus com ID: {relatorio_diff_id}"
                )
                # Atualizar URL do resultado para usar o Directus
                result_url = f"{DIRECTUS_BASE_URL}/assets/{relatorio_diff_id}"
            else:
                print("‚ùå Falha no upload do relat√≥rio HTML")

        if status == "concluido":
            observacao = (
                f"Compara√ß√£o conclu√≠da em {datetime.now().strftime('%d/%m/%Y %H:%M')}. "
                f"Total de modifica√ß√µes encontradas: {total_modifications}. "
                f"Resultado dispon√≠vel em: {result_url}"
            )
        elif status == "erro":
            observacao = f"Erro no processamento em {datetime.now().strftime('%d/%m/%Y %H:%M')}: {error_message}"
        else:
            observacao = f"Status atualizado para '{status}' em {datetime.now().strftime('%d/%m/%Y %H:%M')}"

        update_data = {"status": status, "observacao": observacao}

        # Adicionar ID do arquivo original se fornecido
        if modifica_arquivo:
            update_data["modifica_arquivo"] = modifica_arquivo
            print(
                f"üìÑ Incluindo arquivo original no campo modifica_arquivo: {modifica_arquivo}"
            )

        # Adicionar ID do relat√≥rio se dispon√≠vel
        if relatorio_diff_id:
            update_data["relatorio_diff"] = relatorio_diff_id
            print(
                f"üìÑ Incluindo relat√≥rio HTML no campo relatorio_diff: {relatorio_diff_id}"
            )

        # Se h√° modifica√ß√µes para salvar, incluir no update_data
        if modifications and status == "concluido":
            print(f"üíæ Incluindo {len(modifications)} modifica√ß√µes na transa√ß√£o...")

            # Preparar dados das modifica√ß√µes
            modifications_data = []
            for mod in modifications:
                modification_data = {
                    "versao": versao_id,
                    "categoria": mod["categoria"],
                    "conteudo": mod["conteudo"],
                    "alteracao": mod["alteracao"],
                    "sort": mod["sort"],
                    "status": "draft",
                }
                modifications_data.append(modification_data)

            update_data["modificacoes"] = modifications_data
            print(
                f"‚úÖ {len(modifications_data)} modifica√ß√µes preparadas para salvar em uma √∫nica transa√ß√£o"
            )

        if dry_run:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: N√£o executando atualiza√ß√£o no Directus")
            print(f"   Status: {update_data['status']}")
            print(f"   Observa√ß√£o: {update_data['observacao']}")
            if relatorio_diff_id:
                print(f"   Relat√≥rio HTML: {relatorio_diff_id} (n√£o salvo)")
            if modifications and status == "concluido":
                print(f"   Modifica√ß√µes: {len(modifications)} itens (n√£o salvos)")
            return {"id": versao_id, "status": status, "observacao": observacao}

        # Atualizar vers√£o usando HTTP request direto
        try:
            update_url = f"{DIRECTUS_BASE_URL}/items/versao/{versao_id}"
            response = requests.patch(
                update_url,
                headers=DIRECTUS_HEADERS,
                json=update_data,
                timeout=request_timeout,
            )

            if response.status_code == 200:
                updated_versao = response.json().get("data", {})
                if relatorio_diff_id:
                    print(
                        f"‚úÖ Vers√£o atualizada com status '{status}', relat√≥rio HTML ID {relatorio_diff_id}, e {len(modifications) if modifications else 0} modifica√ß√µes"
                    )
                elif modifications and status == "concluido":
                    print(
                        f"‚úÖ Vers√£o atualizada com status '{status}' e {len(modifications)} modifica√ß√µes salvas em uma √∫nica transa√ß√£o"
                    )
                else:
                    print(f"‚úÖ Vers√£o atualizada com status '{status}'")
                return updated_versao
            else:
                print(
                    f"‚ùå Erro ao atualizar vers√£o: HTTP {response.status_code} - {response.text}"
                )
                return None
        except Exception as e:
            print(f"‚ùå Erro ao atualizar vers√£o: {e}")
            return None

    except Exception as e:
        print(f"‚ùå Erro ao atualizar vers√£o: {e}")
        return None

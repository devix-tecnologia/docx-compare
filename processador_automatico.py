#!/usr/bin/env python3
"""
Processador autom√°tico de vers√µes
Verifica a cada minuto se h√° vers√µes com status 'processar' e as processa automaticamente
"""

import argparse
import difflib
import os
import re
import signal
import subprocess
import sys
import tempfile
import threading
import time
import uuid
from datetime import datetime

import requests
from dotenv import load_dotenv
from flask import Flask, jsonify, send_from_directory

# Carregar vari√°veis de ambiente
load_dotenv()

app = Flask(__name__)

# Configura√ß√µes
DIRECTUS_BASE_URL = (
    os.getenv("DIRECTUS_BASE_URL", "https://contract.devix.co")
    .replace("/admin/", "")
    .rstrip("/")
)
DIRECTUS_TOKEN = os.getenv("DIRECTUS_TOKEN", "your-directus-token")
DIRECTUS_EMAIL = os.getenv("DIRECTUS_EMAIL", "")
DIRECTUS_PASSWORD = os.getenv("DIRECTUS_PASSWORD", "")
RESULTS_DIR = os.getenv("RESULTS_DIR", "results")

# Cliente HTTP para Directus
print("üîß Inicializando cliente HTTP para Directus:")
print(f"   URL: {DIRECTUS_BASE_URL}")
print(f"   Token: {DIRECTUS_TOKEN[:10]}...")

# Headers para requisi√ß√µes HTTP
DIRECTUS_HEADERS = {
    "Authorization": f"Bearer {DIRECTUS_TOKEN}",
    "Content-Type": "application/json",
}

print("‚úÖ Cliente HTTP inicializado")

# Configura√ß√µes do Flask
FLASK_HOST = "127.0.0.1"
FLASK_PORT = 5005

# Vari√°vel global para controlar o processador
processador_ativo = True
processador_thread = None


def signal_handler(signum, frame):
    """
    Manipula sinais para encerramento gracioso da aplica√ß√£o
    """
    global processador_ativo, processador_thread

    signal_names = {
        signal.SIGINT: "SIGINT (Ctrl+C)",
        signal.SIGTERM: "SIGTERM",
        signal.SIGHUP: "SIGHUP",
    }

    signal_name = signal_names.get(signum, f"Sinal {signum}")
    print(f"\nüõë Recebido {signal_name} - Iniciando encerramento gracioso...")

    # Parar o processador
    processador_ativo = False

    # Aguardar a thread do processador terminar
    if processador_thread and processador_thread.is_alive():
        print("‚è≥ Aguardando thread do processador terminar...")
        processador_thread.join(timeout=10)
        if processador_thread.is_alive():
            print("‚ö†Ô∏è Thread do processador n√£o terminou no tempo esperado")
        else:
            print("‚úÖ Thread do processador terminada")

    print("‚úÖ Aplica√ß√£o encerrada graciosamente!")
    sys.exit(0)


# Criar diret√≥rio de resultados
os.makedirs(RESULTS_DIR, exist_ok=True)


def buscar_versoes_para_processar():
    """
    Busca vers√µes com status 'processar' no Directus usando requisi√ß√µes HTTP diretas
    """
    try:
        print(
            f"üîç {datetime.now().strftime('%H:%M:%S')} - Buscando vers√µes para processar..."
        )

        # Primeiro, vamos testar uma query simples sem filtros
        print("üß™ Testando conectividade com query simples...")

        url_simple = f"{DIRECTUS_BASE_URL}/items/versao?limit=5"
        print(f"ÔøΩ URL simples: {url_simple}")
        print(f"ÔøΩ Headers: {DIRECTUS_HEADERS}")
        print("   ----")

        simple_response = requests.get(url_simple, headers=DIRECTUS_HEADERS)

        print("üîç Resultado RAW da query simples:")
        print(f"   Status: {simple_response.status_code}")
        print(f"   Response: {simple_response.text}")
        print("   ----")

        # Se a query simples funcionar, tentamos com filtro
        if simple_response.status_code == 200:
            print("‚úÖ Conectividade OK, tentando query com filtro...")

            # Query com filtros usando query parameters - campos corretos
            url_filtered = f"{DIRECTUS_BASE_URL}/items/versao"
            params = {
                "filter[status][_eq]": "processar",
                "limit": 10,
                "sort": "date_created",
                "fields": "id,date_created,status,versao,observacao,contrato,versiona_ai_request_json",
            }

            print(f"üîç URL com filtro: {url_filtered}")
            print(f"üîç Params: {params}")
            print("   ----")

            versoes_response = requests.get(
                url_filtered, headers=DIRECTUS_HEADERS, params=params
            )

            print("üîç Resultado RAW da query com filtro:")
            print(f"   Status: {versoes_response.status_code}")
            print(f"   Response: {versoes_response.text}")
            print("   ----")

            if versoes_response.status_code == 200:
                try:
                    response_json = versoes_response.json()
                    versoes = response_json.get("data", [])
                except:
                    versoes = []
            else:
                versoes = []
        else:
            print("‚ùå Problema de conectividade detectado")
            versoes = []

        print(f"‚úÖ Encontradas {len(versoes)} vers√µes para processar")
        return versoes

    except Exception as e:
        print(f"‚ùå Erro ao buscar vers√µes: {e}")
        return []


def determine_original_file_id(versao_data):
    """
    Determina qual arquivo usar como original baseado no campo versiona_ai_request_json:
    1. Se is_first_version=true: usa arquivoTemplate (modelo_template)
    2. Se is_first_version=false: usa arquivoBranco (versao_anterior)
    """
    try:
        versao_id = versao_data["id"]
        versao_request = versao_data.get("versiona_ai_request_json", {})

        print(f"üß† Determinando arquivo original para vers√£o {versao_id}...")
        print(f"üîó Dados do contrato: {versao_data.get('contrato')}")

        # Verificar se temos os dados de request
        if not versao_request:
            raise Exception("Campo versiona_ai_request_json n√£o encontrado")

        is_first_version = versao_request.get("is_first_version", False)
        versao_comparacao_tipo = versao_request.get("versao_comparacao_tipo", "")

        if is_first_version or versao_comparacao_tipo == "modelo_template":
            # Primeira vers√£o: comparar com template
            arquivo_original = versao_request.get("arquivoTemplate")
            if arquivo_original:
                print(f"ÔøΩ Primeira vers√£o - usando arquivoTemplate: {arquivo_original}")
                return arquivo_original, "modelo_template"
        else:
            # Vers√£o posterior: comparar com vers√£o anterior (arquivoBranco)
            arquivo_original = versao_request.get("arquivoBranco")
            if arquivo_original:
                print(f"üìÑ Vers√£o posterior - usando arquivoBranco: {arquivo_original}")
                return arquivo_original, "versao_anterior"

        raise Exception(
            "N√£o foi poss√≠vel encontrar arquivo original nos dados da vers√£o"
        )

    except Exception as e:
        raise Exception(f"Erro ao determinar arquivo original: {e}")


def download_file_from_directus(file_path):
    """
    Baixa um arquivo do Directus usando o caminho do arquivo
    """
    try:
        print(f"üì• Baixando arquivo {file_path}...")

        # Construir URL completa para download
        if file_path.startswith("/directus/uploads/"):
            file_id = file_path.replace("/directus/uploads/", "")
        else:
            file_id = file_path

        download_url = f"{DIRECTUS_BASE_URL}/assets/{file_id}"

        # Fazer o download do arquivo
        response = requests.get(download_url, headers=DIRECTUS_HEADERS)

        if response.status_code == 200:
            # Criar arquivo tempor√°rio com extens√£o correta
            import tempfile

            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
            temp_file.write(response.content)
            temp_file.close()

            print(f"‚úÖ Arquivo baixado: {temp_file.name}")
            return temp_file.name
        else:
            raise Exception(f"Erro HTTP {response.status_code}: {response.text}")

    except Exception as e:
        raise Exception(f"Erro ao baixar arquivo {file_path}: {e}")


def html_to_text(html_content):
    """Converte HTML para texto limpo"""
    html_content = re.sub(r"<!--.*?-->", "", html_content, flags=re.DOTALL)
    html_content = re.sub(
        r"<strong[^>]*>(.*?)</strong>", r"\1", html_content, flags=re.DOTALL
    )
    html_content = re.sub(r"<b[^>]*>(.*?)</b>", r"\1", html_content, flags=re.DOTALL)
    html_content = re.sub(r"<em[^>]*>(.*?)</em>", r"\1", html_content, flags=re.DOTALL)
    html_content = re.sub(r"<i[^>]*>(.*?)</i>", r"\1", html_content, flags=re.DOTALL)
    html_content = re.sub(r"<u[^>]*>(.*?)</u>", r"\1", html_content, flags=re.DOTALL)
    html_content = re.sub(
        r"<mark[^>]*>(.*?)</mark>", r"\1", html_content, flags=re.DOTALL
    )
    html_content = re.sub(
        r"<li[^>]*><p[^>]*>(.*?)</p></li>", r"‚Ä¢ \1", html_content, flags=re.DOTALL
    )
    html_content = re.sub(
        r"<li[^>]*>(.*?)</li>", r"‚Ä¢ \1", html_content, flags=re.DOTALL
    )
    html_content = re.sub(r"<ol[^>]*>|</ol>", "", html_content)
    html_content = re.sub(r"<ul[^>]*>|</ul>", "", html_content)
    html_content = re.sub(r"<blockquote[^>]*>|</blockquote>", "", html_content)
    html_content = re.sub(r"<p[^>]*>|</p>", "\n", html_content)
    html_content = re.sub(r"<br[^>]*/?>", "\n", html_content)
    html_content = re.sub(r"<[^>]+>", "", html_content)
    html_content = re.sub(r"&nbsp;", " ", html_content)
    html_content = re.sub(r"&amp;", "&", html_content)
    html_content = re.sub(r"&lt;", "<", html_content)
    html_content = re.sub(r"&gt;", ">", html_content)
    html_content = re.sub(r"&quot;", '"', html_content)
    html_content = re.sub(r"\n\s*\n", "\n", html_content)
    return html_content.strip()


def analyze_differences_detailed(original_text, modified_text):
    """Analisa as diferen√ßas e retorna modifica√ß√µes detalhadas"""
    original_lines = original_text.split("\n")
    modified_lines = modified_text.split("\n")

    diff = list(
        difflib.unified_diff(
            original_lines,
            modified_lines,
            fromfile="Original",
            tofile="Modificado",
            lineterm="",
        )
    )

    modifications = []
    modification_count = 1

    i = 0
    while i < len(diff):
        line = diff[i]

        if line.startswith("@@") or line.startswith("---") or line.startswith("+++"):
            i += 1
            continue
        elif line.startswith("-"):
            # Linha removida
            original_content = line[1:].strip()
            if original_content:  # Ignorar linhas vazias
                # Verificar se a pr√≥xima linha √© uma adi√ß√£o (modifica√ß√£o)
                if i + 1 < len(diff) and diff[i + 1].startswith("+"):
                    modified_content = diff[i + 1][1:].strip()
                    modifications.append(
                        {
                            "categoria": "modificacao",
                            "conteudo": original_content,
                            "alteracao": modified_content,
                            "sort": modification_count,
                        }
                    )
                    i += 2  # Pular a pr√≥xima linha pois j√° processamos
                else:
                    # Apenas remo√ß√£o
                    modifications.append(
                        {
                            "categoria": "remocao",
                            "conteudo": original_content,
                            "alteracao": "",
                            "sort": modification_count,
                        }
                    )
                    i += 1
                modification_count += 1
        elif line.startswith("+"):
            # Linha adicionada (que n√£o foi processada como modifica√ß√£o)
            added_content = line[1:].strip()
            if added_content:  # Ignorar linhas vazias
                modifications.append(
                    {
                        "categoria": "adicao",
                        "conteudo": "",
                        "alteracao": added_content,
                        "sort": modification_count,
                    }
                )
                modification_count += 1
            i += 1
        else:
            i += 1

    return modifications


def update_versao_status(
    versao_id,
    status,
    result_url=None,
    total_modifications=0,
    error_message=None,
    modifications=None,
    dry_run=False,
):
    """Atualiza o status da vers√£o, adiciona observa√ß√µes e salva modifica√ß√µes em uma √∫nica transa√ß√£o"""
    try:
        print(f"üìù Atualizando status da vers√£o {versao_id} para '{status}'...")

        if status == "concluido":
            observacao = (
                f"Compara√ß√£o conclu√≠da em {datetime.now().strftime('%d/%m/%Y %H:%M')}. "
                f"Total de modifica√ß√µes encontradas: {total_modifications}. "
                f"Resultado dispon√≠vel em: {result_url}"
            )
        elif status == "erro":
            observacao = f"Erro no processamento em {datetime.now().strftime('%d/%m/%Y %H:%M')}: {error_message}"
        else:
            observacao = f"Status atualizado para '{status}' em {datetime.now().strftime('%d/%m/%Y %H:%M')}"

        update_data = {"status": status, "observacao": observacao}

        # Se h√° modifica√ß√µes para salvar, incluir no update_data
        if modifications and status == "concluido":
            print(f"üíæ Incluindo {len(modifications)} modifica√ß√µes na transa√ß√£o...")

            # Preparar dados das modifica√ß√µes
            modifications_data = []
            for mod in modifications:
                modification_data = {
                    "versao": versao_id,
                    "categoria": mod["categoria"],
                    "conteudo": mod["conteudo"],
                    "alteracao": mod["alteracao"],
                    "sort": mod["sort"],
                    "status": "published",
                }
                modifications_data.append(modification_data)

            update_data["modificacoes"] = modifications_data
            print(
                f"‚úÖ {len(modifications_data)} modifica√ß√µes preparadas para salvar em uma √∫nica transa√ß√£o"
            )

        if dry_run:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: N√£o executando atualiza√ß√£o no Directus")
            print(f"   Status: {update_data['status']}")
            print(f"   Observa√ß√£o: {update_data['observacao']}")
            if modifications and status == "concluido":
                print(f"   Modifica√ß√µes: {len(modifications)} itens (n√£o salvos)")
            return {"id": versao_id, "status": status, "observacao": observacao}

        # Atualizar vers√£o usando HTTP request direto
        try:
            update_url = f"{DIRECTUS_BASE_URL}/items/versao/{versao_id}"
            response = requests.patch(
                update_url, headers=DIRECTUS_HEADERS, json=update_data
            )

            if response.status_code == 200:
                updated_versao = response.json().get("data", {})
                if modifications and status == "concluido":
                    print(
                        f"‚úÖ Vers√£o atualizada com status '{status}' e {len(modifications)} modifica√ß√µes salvas em uma √∫nica transa√ß√£o"
                    )
                else:
                    print(f"‚úÖ Vers√£o atualizada com status '{status}'")
                return updated_versao
            else:
                print(
                    f"‚ùå Erro ao atualizar vers√£o: HTTP {response.status_code} - {response.text}"
                )
                return None
        except Exception as e:
            print(f"‚ùå Erro ao atualizar vers√£o: {e}")
            return None

    except Exception as e:
        print(f"‚ùå Erro ao atualizar vers√£o: {e}")
        return None


def processar_versao(versao_data, dry_run=False):
    """
    Processa uma vers√£o espec√≠fica
    """
    versao_id = versao_data["id"]

    try:
        if dry_run:
            print(f"\nüèÉ‚Äç‚ôÇÔ∏è DRY-RUN: Analisando vers√£o {versao_id} (sem altera√ß√µes)")
        else:
            print(f"\nüöÄ Processando vers√£o {versao_id}")

        # Atualizar status para 'processando' (apenas se n√£o for dry-run)
        if not dry_run:
            update_versao_status(versao_id, "processando")
        else:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: Pulando atualiza√ß√£o de status para 'processando'")

        # 1. Determinar arquivo original e modificado
        original_file_path, original_source = determine_original_file_id(versao_data)

        # Obter arquivo modificado (preenchido) dos dados de request
        versao_request = versao_data.get("versiona_ai_request_json", {})
        modified_file_path = versao_request.get("arquivoPreenchido")

        if not modified_file_path:
            raise Exception("Vers√£o n√£o possui arquivoPreenchido nos dados de request")

        print(f"üìÅ Original: {original_file_path} (fonte: {original_source})")
        print(f"üìÑ Modificado: {modified_file_path}")

        # 2. Baixar arquivos
        original_path = download_file_from_directus(original_file_path)
        modified_path = download_file_from_directus(modified_file_path)

        try:
            # 3. Gerar compara√ß√£o HTML usando o CLI existente
            result_id = str(uuid.uuid4())
            result_filename = f"comparison_{result_id}.html"
            result_path = os.path.join(RESULTS_DIR, result_filename)

            print("üîÑ Executando compara√ß√£o visual usando CLI...")

            # Executar o docx_diff_viewer.py para HTML visual
            cmd = [
                "python",
                "docx_diff_viewer.py",
                original_path,
                modified_path,
                result_path,
            ]

            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode != 0:
                raise Exception(f"Erro na compara√ß√£o: {result.stderr}")

            # 4. Converter documentos para an√°lise textual
            print("üìä Analisando diferen√ßas textuais...")

            # Converter para HTML tempor√°rio para an√°lise
            original_html_temp = tempfile.NamedTemporaryFile(
                mode="w", suffix=".html", delete=False
            )
            modified_html_temp = tempfile.NamedTemporaryFile(
                mode="w", suffix=".html", delete=False
            )

            # Converter usando pandoc
            subprocess.run(
                ["pandoc", original_path, "-o", original_html_temp.name], check=True
            )
            subprocess.run(
                ["pandoc", modified_path, "-o", modified_html_temp.name], check=True
            )

            # Ler e processar HTML
            with open(original_html_temp.name, encoding="utf-8") as f:
                original_html = f.read()
            with open(modified_html_temp.name, encoding="utf-8") as f:
                modified_html = f.read()

            # Converter para texto limpo
            original_text = html_to_text(original_html)
            modified_text = html_to_text(modified_html)

            # Analisar diferen√ßas
            modifications = analyze_differences_detailed(original_text, modified_text)

            # 5. Atualizar status da vers√£o para conclu√≠do e salvar modifica√ß√µes em uma √∫nica transa√ß√£o
            result_url = f"http://{FLASK_HOST}:{FLASK_PORT}/outputs/{result_filename}"
            update_versao_status(
                versao_id,
                "concluido",
                result_url,
                len(modifications),
                modifications=modifications,
                dry_run=dry_run,
            )

            print(
                f"‚úÖ Vers√£o {versao_id} processada com sucesso! {len(modifications)} modifica√ß√µes encontradas"
            )

            # Limpar arquivos tempor√°rios de an√°lise
            for temp_file in [original_html_temp.name, modified_html_temp.name]:
                try:
                    os.unlink(temp_file)
                except:
                    pass

        finally:
            # Limpar arquivos tempor√°rios principais
            for temp_file in [original_path, modified_path]:
                try:
                    if os.path.exists(temp_file):
                        os.unlink(temp_file)
                except:
                    pass

    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå Erro ao processar vers√£o {versao_id}: {error_msg}")
        if not dry_run:
            update_versao_status(versao_id, "erro", error_message=error_msg)
        else:
            print("üèÉ‚Äç‚ôÇÔ∏è DRY-RUN: N√£o atualizando status de erro no Directus")


def loop_processador(dry_run=False):
    """
    Loop principal do processador autom√°tico
    """
    if dry_run:
        print("üèÉ‚Äç‚ôÇÔ∏è Processador autom√°tico iniciado em modo DRY-RUN!")
    else:
        print("üîÑ Processador autom√°tico iniciado!")

    while processador_ativo:
        try:
            # Buscar vers√µes para processar
            versoes = buscar_versoes_para_processar()

            # Processar cada vers√£o encontrada
            for versao in versoes:
                if not processador_ativo:
                    break
                processar_versao(versao, dry_run)

            if not versoes:
                status_msg = "DRY-RUN" if dry_run else "Normal"
                print(
                    f"üò¥ {datetime.now().strftime('%H:%M:%S')} - Nenhuma vers√£o para processar ({status_msg})"
                )

        except Exception as e:
            print(f"‚ùå Erro no loop do processador: {e}")

        # Aguardar 1 minuto antes da pr√≥xima verifica√ß√£o
        # Dividir em intervalos menores para ser mais responsivo aos sinais
        if processador_ativo:
            for _ in range(60):  # 60 segundos divididos em intervalos de 1 segundo
                if not processador_ativo:
                    break
                time.sleep(1)

    print("üîÑ Loop do processador finalizado")


# Endpoints da API para monitoramento
@app.route("/health", methods=["GET"])
def health():
    """Verifica√ß√£o de sa√∫de"""
    return jsonify(
        {
            "status": "healthy",
            "processador_ativo": processador_ativo,
            "timestamp": datetime.now().isoformat(),
        }
    )


@app.route("/status", methods=["GET"])
def status():
    """Status do processador"""
    return jsonify(
        {
            "processador_ativo": processador_ativo,
            "directus_url": DIRECTUS_BASE_URL,
            "results_dir": RESULTS_DIR,
            "timestamp": datetime.now().isoformat(),
        }
    )


@app.route("/outputs/<path:filename>", methods=["GET"])
def serve_result(filename):
    """Servir arquivos HTML de resultado"""
    try:
        return send_from_directory("outputs", filename)
    except FileNotFoundError:
        return jsonify({"error": "Arquivo n√£o encontrado"}), 404


def create_arg_parser():
    """Criar parser de argumentos da linha de comando"""
    parser = argparse.ArgumentParser(
        description="Processador autom√°tico de vers√µes",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Executar em modo de an√°lise sem modificar registros no Directus",
    )

    parser.add_argument(
        "--host",
        default=FLASK_HOST,
        help=f"Host para o servidor Flask de monitoramento (padr√£o: {FLASK_HOST})",
    )

    parser.add_argument(
        "--port",
        type=int,
        default=FLASK_PORT,
        help=f"Porta para o servidor Flask de monitoramento (padr√£o: {FLASK_PORT})",
    )

    return parser


if __name__ == "__main__":
    # Configurar argumentos da linha de comando
    parser = create_arg_parser()
    args = parser.parse_args()

    # Registrar handlers de sinais para encerramento gracioso
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # Comando kill
    if hasattr(signal, "SIGHUP"):
        signal.signal(signal.SIGHUP, signal_handler)  # Hang up

    print("üöÄ Processador Autom√°tico de Vers√µes")
    print(f"üìÅ Resultados salvos em: {RESULTS_DIR}")
    print(f"üîó Directus: {DIRECTUS_BASE_URL}")
    print(f"üåê Servidor de monitoramento: http://{args.host}:{args.port}")
    print("‚è∞ Verifica√ß√£o autom√°tica a cada 1 minuto")
    print("üîí Monitoramento de sinais ativo (SIGINT, SIGTERM, SIGHUP)")
    if args.dry_run:
        print("üèÉ‚Äç‚ôÇÔ∏è Modo: DRY-RUN (sem altera√ß√µes no banco)")
    print("")
    print("üìã Endpoints de monitoramento:")
    print("  ‚Ä¢ GET  /health - Verifica√ß√£o de sa√∫de")
    print("  ‚Ä¢ GET  /status - Status do processador")
    print("  ‚Ä¢ GET  /outputs/<filename> - Visualizar resultados")
    print("")

    # Iniciar o processador em uma thread separada
    processador_thread = threading.Thread(
        target=lambda: loop_processador(args.dry_run), daemon=True
    )
    processador_thread.start()

    # Iniciar o servidor Flask para monitoramento
    try:
        app.run(host=args.host, port=args.port, debug=False)
    except KeyboardInterrupt:
        print("\nüõë Parando processador...")
        processador_ativo = False
        print("‚úÖ Processador parado!")

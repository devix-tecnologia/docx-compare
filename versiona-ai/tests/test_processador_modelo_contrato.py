#!/usr/bin/env python3
"""
Testes para o processador de modelo de contrato
"""

import os
import sys

# Adicionar o diret√≥rio versiona-ai ao path ANTES de importar
versiona_ai_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, versiona_ai_dir)

# Importa√ß√£o ap√≥s ajuste do path (necess√°rio para encontrar o m√≥dulo)
# ruff: noqa: E402
from processador_tags_modelo import ProcessadorTagsModelo  # type: ignore


# Helper para extrair tags usando o novo processador
def extract_tags_from_differences(modifications):
    """Extrai tags usando o ProcessadorTagsModelo"""
    processador = ProcessadorTagsModelo("https://test.com", "fake-token")
    return processador._extrair_tags(modifications)


def test_extract_tags_basic():
    """Testa extra√ß√£o b√°sica de tags"""
    print("üß™ Teste: Extra√ß√£o b√°sica de tags")

    modifications = [
        {
            "categoria": "adicao",
            "conteudo": "",
            "alteracao": "Este √© o {{cabecalho}} do documento",
            "sort": 1,
        },
        {
            "categoria": "modificacao",
            "conteudo": "Texto original",
            "alteracao": "Texto com {{nome_cliente}} modificado",
            "sort": 2,
        },
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = {"cabecalho", "nome_cliente"}

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    # Verificar se tem informa√ß√µes de caminho
    for tag_info in tags_info:
        assert "caminho_tag_inicio" in tag_info, "Tag deve ter caminho_tag_inicio"
        assert "caminho_tag_fim" in tag_info, "Tag deve ter caminho_tag_fim"

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_tags_with_spaces():
    """Testa extra√ß√£o de tags com espa√ßos"""
    print("üß™ Teste: Tags com espa√ßos")

    modifications = [
        {
            "categoria": "adicao",
            "conteudo": "",
            "alteracao": "{{ cabecalho }} e {{ data_atual }}",
            "sort": 1,
        }
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = {"cabecalho", "data_atual"}

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_tags_self_closing():
    """Testa extra√ß√£o de tags auto-fechadas"""
    print("üß™ Teste: Tags auto-fechadas")

    modifications = [
        {
            "categoria": "adicao",
            "conteudo": "",
            "alteracao": "Insira {{linha /}} aqui e {{quebra_pagina /}} tamb√©m",
            "sort": 1,
        }
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = {"linha", "quebra_pagina"}

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_tags_closing():
    """Testa extra√ß√£o de tags de fechamento"""
    print("üß™ Teste: Tags de fechamento")

    modifications = [
        {
            "categoria": "adicao",
            "conteudo": "",
            "alteracao": "{{inicio_secao}} conte√∫do {{/inicio_secao}}",
            "sort": 1,
        }
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = {"inicio_secao"}

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_tags_mixed():
    """Testa extra√ß√£o de tags com m√∫ltiplos padr√µes"""
    print("üß™ Teste: M√∫ltiplos padr√µes de tags")

    modifications = [
        {
            "categoria": "adicao",
            "conteudo": "",
            "alteracao": "{{cabecalho}} texto {{ nome_cliente }} mais {{linha /}} e {{inicio}} ... {{/inicio}}",
            "sort": 1,
        },
        {
            "categoria": "modificacao",
            "conteudo": "Texto original {{old_tag}}",
            "alteracao": "Texto modificado {{ new_tag }}",
            "sort": 2,
        },
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = {
        "cabecalho",
        "nome_cliente",
        "linha",
        "inicio",
        "old_tag",
        "new_tag",
    }

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_tags_no_tags():
    """Testa quando n√£o h√° tags"""
    print("üß™ Teste: Sem tags")

    modifications = [
        {
            "categoria": "adicao",
            "conteudo": "",
            "alteracao": "Texto normal sem tags",
            "sort": 1,
        }
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = set()

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_tags_invalid_patterns():
    """Testa padr√µes inv√°lidos que n√£o devem ser capturados"""
    print("üß™ Teste: Padr√µes inv√°lidos")

    modifications = [
        {
            "categoria": "adicao",
            "conteudo": "",
            "alteracao": "{tag} {{}} {{123tag}} {{tag-with-dash}} texto {{{triplo}}}",
            "sort": 1,
        }
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = set()  # Nenhuma tag v√°lida nesses padr√µes

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_tags_case_insensitive():
    """Testa se a extra√ß√£o √© case-insensitive"""
    print("üß™ Teste: Case insensitive")

    modifications = [
        {
            "categoria": "adicao",
            "conteudo": "",
            "alteracao": "{{CABECALHO}} {{Nome_Cliente}} {{data_ATUAL}}",
            "sort": 1,
        }
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = {"cabecalho", "nome_cliente", "data_atual"}

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_tags_numeric():
    """Testa extra√ß√£o de tags num√©ricas que envolvem conte√∫do de cl√°usulas"""
    print("üß™ Teste: Tags num√©ricas")

    modifications = [
        {
            "categoria": "modificacao",
            "conteudo": "Cl√°usula 6\nlorem lorem lorem e subcl√°usula 7.4 e 10.1.2",
            "alteracao": "{{6}}Cl√°usula 6\nlorem lorem lorem{{/6}} e subcl√°usula {{7.4}}texto da 7.4{{/7.4}} e {{10.1.2}}texto{{/10.1.2}}",
            "sort": 1,
        }
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = {"6", "7.4", "10.1.2"}

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_tags_with_prefix():
    """Testa extra√ß√£o de tags com prefixo TAG-"""
    print("üß™ Teste: Tags com prefixo TAG-")

    modifications = [
        {
            "categoria": "adicao",
            "conteudo": "",
            "alteracao": "{{TAG-cabecalho}} e {{TAG-rodape}} no documento",
            "sort": 1,
        }
    ]

    tags_info = extract_tags_from_differences(modifications)
    tags = {tag["nome"] for tag in tags_info}
    expected_tags = {"cabecalho", "rodape"}

    print(f"   Tags encontradas: {sorted(tags)}")
    print(f"   Tags esperadas: {sorted(expected_tags)}")

    assert tags == expected_tags, f"Esperado {expected_tags}, obtido {tags}"
    print("   ‚úÖ Teste passou!")
    print()


def test_extract_content_between_tags():
    """Testa extra√ß√£o de conte√∫do entre tags de abertura/fechamento"""
    print("üß™ Teste: Conte√∫do entre tags")

    processador = ProcessadorTagsModelo("https://test.com", "fake-token")

    texto = """
    {{TAG-secao1}}
    Este √© o conte√∫do da se√ß√£o 1
    Com m√∫ltiplas linhas
    {{/TAG-secao1}}

    {{6}}
    Conte√∫do da cl√°usula 6
    {{/6}}

    {{nome}}
    Conte√∫do da tag nome
    {{/nome}}
    """

    conteudo_map = processador._extrair_conteudo_entre_tags(texto)

    print(f"   Tags com conte√∫do: {sorted(conteudo_map.keys())}")

    # Verificar se as 3 tags foram encontradas
    expected_tags = {"secao1", "6", "nome"}
    found_tags = set(conteudo_map.keys())

    assert found_tags == expected_tags, f"Esperado {expected_tags}, obtido {found_tags}"

    # Verificar se o conte√∫do foi extra√≠do
    for tag_name, conteudo in conteudo_map.items():
        assert conteudo, f"Tag {tag_name} deveria ter conte√∫do"
        assert "{{" not in conteudo, "Conte√∫do N√ÉO deve incluir tags de abertura"
        assert "}}" not in conteudo, "Conte√∫do N√ÉO deve incluir tags de fechamento"
        print(f"   ‚úì Tag '{tag_name}' tem {len(conteudo)} caracteres de conte√∫do")

    print("   ‚úÖ Teste passou!")
    print()


def test_extract_content_real_document():
    """Testa extra√ß√£o de conte√∫do com dados reais do documento"""
    print("üß™ Teste: Conte√∫do de documento real")

    processador = ProcessadorTagsModelo("https://test.com", "fake-token")

    # Conte√∫do real extra√≠do do arquivo com tags do modelo
    texto = """{{1.1}}

1.  O CONTRATO tem por objeto a execu√ß√£o, pela EMPREITEIRA, das obras
    descritas no QUADRO RESUMO, conforme especifica√ß√µes detalhadas no
    Memorial Descritivo, parte integrante deste instrumento.

{{/1.1}}

Texto intermedi√°rio sem tag

{{7.4}}
A EMPREITEIRA obriga-se a executar os servi√ßos de acordo com as normas
t√©cnicas aplic√°veis e seguindo as melhores pr√°ticas de engenharia.
{{/7.4}}

{{10.1.2}}
O prazo para conclus√£o das obras ser√° de 180 dias contados da data
de emiss√£o da Ordem de Servi√ßo.
{{/10.1.2}}"""

    conteudo_map = processador._extrair_conteudo_entre_tags(texto)

    print(f"   Tags com conte√∫do: {sorted(conteudo_map.keys())}")

    # Verificar se as 3 tags foram encontradas
    expected_tags = {"1.1", "7.4", "10.1.2"}
    found_tags = set(conteudo_map.keys())

    assert found_tags == expected_tags, f"Esperado {expected_tags}, obtido {found_tags}"

    # Verificar conte√∫do espec√≠fico de cada tag (removendo espa√ßos/quebras para compara√ß√£o)
    conteudo_1_1 = conteudo_map["1.1"].replace("\n", " ").replace("  ", " ")
    assert "O CONTRATO tem por objeto" in conteudo_1_1, (
        "Tag 1.1 deve conter texto esperado"
    )
    assert "execu√ß√£o, pela EMPREITEIRA" in conteudo_1_1, (
        "Tag 1.1 deve conter texto esperado"
    )

    conteudo_7_4 = conteudo_map["7.4"].replace("\n", " ").replace("  ", " ")
    assert "normas" in conteudo_7_4 and "t√©cnicas" in conteudo_7_4, (
        "Tag 7.4 deve conter texto esperado"
    )
    assert "melhores pr√°ticas" in conteudo_7_4, "Tag 7.4 deve conter texto esperado"

    conteudo_10_1_2 = conteudo_map["10.1.2"].replace("\n", " ").replace("  ", " ")
    assert "180 dias" in conteudo_10_1_2, "Tag 10.1.2 deve conter texto esperado"
    assert "Ordem de Servi√ßo" in conteudo_10_1_2, (
        "Tag 10.1.2 deve conter texto esperado"
    )

    # Verificar que N√ÉO inclui as tags no conte√∫do
    for tag_name, conteudo in conteudo_map.items():
        assert f"{{{{{tag_name}}}}}" not in conteudo, (
            f"Conte√∫do N√ÉO deve incluir tag de abertura {{{{{tag_name}}}}}"
        )
        assert f"{{{{/{tag_name}}}}}" not in conteudo, (
            f"Conte√∫do N√ÉO deve incluir tag de fechamento {{{{/{tag_name}}}}}"
        )
        print(
            f"   ‚úì Tag '{tag_name}' tem {len(conteudo)} caracteres de conte√∫do v√°lido"
        )

    print("   ‚úÖ Teste passou!")
    print()


def test_extract_content_orphan_tags():
    """Testa que tags √≥rf√£s (sem par) s√£o desconsideradas"""
    print("üß™ Testando descarte de tags √≥rf√£s...")

    processador = ProcessadorTagsModelo(
        directus_base_url="http://test.com", directus_token="test_token"
    )

    # Documento com tags √≥rf√£s
    texto = """
    Documento de teste com tags √≥rf√£s

    {{1.1}}
    Conte√∫do v√°lido da tag 1.1 com abertura e fechamento
    {{/1.1}}

    {{/7.4}}
    Esta tag s√≥ tem fechamento, sem abertura - deve ser descartada

    {{7.10}}
    Esta tag s√≥ tem abertura, sem fechamento - deve ser descartada

    {{2.5}}
    Conte√∫do v√°lido da tag 2.5 com ambas as tags
    {{/2.5}}

    {{/710}}
    Outra tag √≥rf√£ apenas com fechamento

    {{3.1}}
    Mais um conte√∫do v√°lido
    {{/3.1}}
    """

    conteudo_map = processador._extrair_conteudo_entre_tags(texto)

    # Verificar que apenas tags v√°lidas foram extra√≠das
    assert len(conteudo_map) == 3, f"Deve extrair 3 tags v√°lidas, extraiu {len(conteudo_map)}"

    # Tags v√°lidas devem estar presentes
    assert "1.1" in conteudo_map, "Tag 1.1 (v√°lida) deve estar presente"
    assert "2.5" in conteudo_map, "Tag 2.5 (v√°lida) deve estar presente"
    assert "3.1" in conteudo_map, "Tag 3.1 (v√°lida) deve estar presente"

    # Tags √≥rf√£s N√ÉO devem estar presentes
    assert "7.4" not in conteudo_map, "Tag 7.4 (√≥rf√£ - s√≥ fechamento) N√ÉO deve estar presente"
    assert "7.10" not in conteudo_map, "Tag 7.10 (√≥rf√£ - s√≥ abertura) N√ÉO deve estar presente"
    assert "710" not in conteudo_map, "Tag 710 (√≥rf√£ - s√≥ fechamento) N√ÉO deve estar presente"

    # Verificar conte√∫do das tags v√°lidas
    assert "Conte√∫do v√°lido da tag 1.1" in conteudo_map["1.1"]
    assert "Conte√∫do v√°lido da tag 2.5" in conteudo_map["2.5"]
    assert "Mais um conte√∫do v√°lido" in conteudo_map["3.1"]

    print(f"   ‚úì Tags v√°lidas extra√≠das: {sorted(conteudo_map.keys())}")
    print("   ‚úì Tags √≥rf√£s corretamente descartadas: 7.4, 7.10, 710")
    print("   ‚úÖ Teste passou!")
    print()


def run_all_tests():
    """Executa todos os testes"""
    print("üöÄ Executando testes do processador de modelo de contrato...\n")

    tests = [
        test_extract_tags_basic,
        test_extract_tags_with_spaces,
        test_extract_tags_self_closing,
        test_extract_tags_closing,
        test_extract_tags_mixed,
        test_extract_tags_no_tags,
        test_extract_tags_invalid_patterns,
        test_extract_tags_case_insensitive,
        test_extract_tags_numeric,
        test_extract_tags_with_prefix,
        test_extract_content_between_tags,
        test_extract_content_real_document,
        test_extract_content_orphan_tags,
    ]

    passed = 0
    failed = 0

    for test in tests:
        try:
            test()
            passed += 1
        except Exception as e:
            print(f"   ‚ùå Teste falhou: {e}")
            failed += 1

    print("üìä Resumo dos testes:")
    print(f"   ‚úÖ Passou: {passed}")
    print(f"   ‚ùå Falhou: {failed}")
    print(f"   üìã Total: {passed + failed}")

    if failed == 0:
        print("\nüéâ Todos os testes passaram!")
        return True
    else:
        print(f"\n‚ö†Ô∏è {failed} teste(s) falharam!")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)

"""
Teste de integra√ß√£o unit√°rio do contrato de vig√™ncia.
Usa a implementa√ß√£o REAL do Versiona, mas com dados mockados (sem Directus).

Valida que o processamento detecta corretamente:
1. 7 modifica√ß√µes no total
2. Nenhuma modifica√ß√£o em revis√£o manual
3. Tipos corretos (ALTERACAO, REMOCAO, INSERCAO)
4. Vincula√ß√µes corretas √†s cl√°usulas
"""

import os
import sys
from unittest.mock import MagicMock, patch

import pytest

# Path setup
versiona_ai_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, versiona_ai_dir)
tests_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, tests_dir)

# ruff: noqa: E402
from directus_server import DirectusAPI
from fixtures.contrato_vigencia_fixture import (
    METRICAS_ESPERADAS,
    MODELO_CLAUSULAS,
    MODELO_TEXTO_ORIGINAL,
    TOTAL_MODIFICACOES_ESPERADO,
    VERSAO_TEXTO_MODIFICADO,
)


class TestContratoVigenciaIntegracao:
    """Testes de integra√ß√£o usando implementa√ß√£o real com dados mockados."""

    @pytest.fixture
    def api_mockada(self):
        """Cria inst√¢ncia do DirectusAPI com requisi√ß√µes HTTP mockadas."""
        with patch("directus_server.requests") as mock_requests:
            # Mock para GET - buscar modelo
            mock_get_modelo = MagicMock()
            mock_get_modelo.status_code = 200
            mock_get_modelo.json.return_value = {
                "data": {
                    "id": "d2699a57-b0ff-472b-a130-626f5fc2852b",
                    "nome": "Modelo de Contrato - Vig√™ncia",
                    "texto_original": MODELO_TEXTO_ORIGINAL,
                    "arquivo_com_tags": MODELO_TEXTO_ORIGINAL,  # Mesmo texto
                }
            }

            # Mock para GET - buscar cl√°usulas
            mock_get_clausulas = MagicMock()
            mock_get_clausulas.status_code = 200
            mock_get_clausulas.json.return_value = {
                "data": [
                    {
                        "id": f"clausula-{i}",
                        "numero": cl["numero"],
                        "nome": cl["nome"],
                        "modelo_id": "d2699a57-b0ff-472b-a130-626f5fc2852b",
                    }
                    for i, cl in enumerate(MODELO_CLAUSULAS, 1)
                ]
            }

            # Mock para GET - buscar vers√£o
            mock_get_versao = MagicMock()
            mock_get_versao.status_code = 200
            mock_get_versao.json.return_value = {
                "data": {
                    "id": "322e56c0-4b38-4e62-b563-8f29a131889c",
                    "texto_modificado": VERSAO_TEXTO_MODIFICADO,
                    "modelo_id": "d2699a57-b0ff-472b-a130-626f5fc2852b",
                }
            }

            # Mock para GET - buscar tags do modelo
            mock_get_tags = MagicMock()
            mock_get_tags.status_code = 200
            mock_get_tags.json.return_value = {"data": []}  # Vazio por enquanto

            # Mock para POST - criar tags/modifica√ß√µes
            mock_post = MagicMock()
            mock_post.status_code = 201
            mock_post.json.return_value = {"data": {"id": "created-id"}}

            # Configurar respostas baseadas na URL
            def mock_get_side_effect(url, **_kwargs):
                if "modelos/d2699a57" in url and "clausulas" not in url:
                    return mock_get_modelo
                elif "clausulas" in url:
                    return mock_get_clausulas
                elif "versoes/322e56c0" in url:
                    return mock_get_versao
                elif "tags" in url:
                    return mock_get_tags
                return MagicMock(status_code=404)

            mock_requests.get.side_effect = mock_get_side_effect
            mock_requests.post.return_value = mock_post

            # Criar inst√¢ncia da API
            api = DirectusAPI()
            yield api

    def _get_modificacoes(self, api_mockada):
        """Helper para obter modifica√ß√µes do diff."""
        diff_html = api_mockada._generate_diff_html(
            MODELO_TEXTO_ORIGINAL, VERSAO_TEXTO_MODIFICADO
        )
        return api_mockada._extrair_modificacoes_do_diff(
            diff_html, MODELO_TEXTO_ORIGINAL, VERSAO_TEXTO_MODIFICADO
        )

    def test_processamento_detecta_7_modificacoes(self, api_mockada):
        """Testa que o processamento detecta exatamente 7 modifica√ß√µes."""
        # Obter modifica√ß√µes
        modificacoes = self._get_modificacoes(api_mockada)

        # Contar modifica√ß√µes
        total_mods = len(modificacoes)

        print(f"\nüìä Modifica√ß√µes detectadas: {total_mods}")
        print(f"üìä Esperado: {TOTAL_MODIFICACOES_ESPERADO}")

        assert total_mods == TOTAL_MODIFICACOES_ESPERADO, (
            f"Esperado {TOTAL_MODIFICACOES_ESPERADO} modifica√ß√µes, encontrado {total_mods}"
        )

    def test_nenhuma_modificacao_em_revisao_manual(self, api_mockada):
        """
        Testa que nenhuma modifica√ß√£o deve ficar em revis√£o manual.
        Este √© o comportamento ESPERADO (n√£o o atual que tem bug).
        """
        # Processar diff
        modificacoes = self._get_modificacoes(api_mockada)

        # Por enquanto, apenas validamos que temos as modifica√ß√µes
        assert len(modificacoes) > 0, "Deve ter modifica√ß√µes detectadas"

    def test_modificacao_1_1_quadro_resumo(self, api_mockada):
        """Valida detec√ß√£o da mudan√ßa QUADRO RESUMO ‚Üí ESCOPO INICIAL PREVISTO."""
        modificacoes = self._get_modificacoes(api_mockada)

        # Procurar modifica√ß√£o que cont√©m estas palavras-chave
        mod_encontrada = None
        for mod in modificacoes:
            conteudo = mod.get("conteudo", {})
            conteudo_orig = conteudo.get("original", "")
            conteudo_novo = conteudo.get("novo", "")

            if (
                "QUADRO RESUMO" in conteudo_orig
                and "ESCOPO INICIAL PREVISTO" in conteudo_novo
            ):
                mod_encontrada = mod
                break

        assert mod_encontrada is not None, (
            "Deve detectar mudan√ßa QUADRO RESUMO ‚Üí ESCOPO INICIAL PREVISTO"
        )
        assert mod_encontrada["tipo"] == "ALTERACAO", "Deve ser tipo ALTERACAO"

    def test_modificacao_1_2_exclusividade_removida(self, api_mockada):
        """Valida detec√ß√£o da remo√ß√£o da cl√°usula 1.2 sobre exclusividade."""
        modificacoes = self._get_modificacoes(api_mockada)

        # Procurar remo√ß√£o que cont√©m "exclusividade"
        remocao_encontrada = None
        for mod in modificacoes:
            conteudo = mod.get("conteudo", {})
            conteudo_orig = conteudo.get("original", "")

            if mod.get("tipo") == "REMOCAO" and "exclusividade" in conteudo_orig:
                remocao_encontrada = mod
                break

        assert remocao_encontrada is not None, (
            "Deve detectar remo√ß√£o da cl√°usula sobre exclusividade"
        )

    def test_modificacao_2_2_caixa_alta(self, api_mockada):
        """Valida detec√ß√£o da mudan√ßa para mai√∫sculas na cl√°usula 2.2."""
        modificacoes = self._get_modificacoes(api_mockada)

        # Procurar modifica√ß√£o com "SE APLIC√ÅVEL"
        mod_encontrada = None
        for mod in modificacoes:
            conteudo = mod.get("conteudo", {})
            conteudo_novo = conteudo.get("novo", "")

            if "SE APLIC√ÅVEL, A RETROATIVIDADE" in conteudo_novo:
                mod_encontrada = mod
                break

        assert mod_encontrada is not None, (
            "Deve detectar mudan√ßa para mai√∫sculas na 2.2"
        )

    def test_modificacao_2_3_empresa_contratada(self, api_mockada):
        """Valida detec√ß√£o da mudan√ßa CONTRATADA ‚Üí EMPRESA CONTRATADA."""
        modificacoes = self._get_modificacoes(api_mockada)

        # Procurar modifica√ß√£o com "EMPRESA CONTRATADA"
        mod_encontrada = None
        for mod in modificacoes:
            conteudo = mod.get("conteudo", {})
            conteudo_novo = conteudo.get("novo", "")

            if (
                "EMPRESA CONTRATADA" in conteudo_novo
                and "desmobiliza√ß√£o" in conteudo_novo
            ):
                mod_encontrada = mod
                break

        assert mod_encontrada is not None, (
            "Deve detectar mudan√ßa para EMPRESA CONTRATADA"
        )

    def test_modificacao_2_5_insercao_tributaria(self, api_mockada):
        """Valida detec√ß√£o da inser√ß√£o da cl√°usula 2.5 sobre tributa√ß√£o."""
        modificacoes = self._get_modificacoes(api_mockada)

        # Procurar inser√ß√£o com "obriga√ß√µes tribut√°rias"
        insercao_encontrada = None
        for mod in modificacoes:
            conteudo = mod.get("conteudo", {})
            conteudo_novo = conteudo.get("novo", "")

            if (
                mod.get("tipo") == "INSERCAO"
                and "obriga√ß√µes tribut√°rias" in conteudo_novo
            ):
                insercao_encontrada = mod
                break

        assert insercao_encontrada is not None, (
            "Deve detectar inser√ß√£o da cl√°usula 2.5 sobre tributa√ß√£o"
        )

    def test_distribuicao_tipos_modificacoes(self, api_mockada):
        """Valida distribui√ß√£o dos tipos de modifica√ß√µes."""
        modificacoes = self._get_modificacoes(api_mockada)

        # Contar por tipo
        tipos = {}
        for mod in modificacoes:
            tipo = mod.get("tipo", "unknown")
            tipos[tipo] = tipos.get(tipo, 0) + 1

        print(f"\nüìä Distribui√ß√£o de tipos: {tipos}")

        # Valida√ß√µes m√≠nimas
        assert tipos.get("ALTERACAO", 0) >= 4, "Deve ter pelo menos 4 altera√ß√µes"
        assert tipos.get("REMOCAO", 0) >= 1, "Deve ter pelo menos 1 remo√ß√£o"
        assert tipos.get("INSERCAO", 0) >= 1, "Deve ter pelo menos 1 inser√ß√£o"

    def test_metricas_cobertura(self, api_mockada):
        """Valida m√©tricas de cobertura das modifica√ß√µes."""
        modificacoes = self._get_modificacoes(api_mockada)

        total = len(modificacoes)
        esperado = METRICAS_ESPERADAS["total_modificacoes"]

        # Toler√¢ncia de ¬±1 modifica√ß√£o (podem haver varia√ß√µes na detec√ß√£o)
        assert abs(total - esperado) <= 1, (
            f"Total de modifica√ß√µes ({total}) difere muito do esperado ({esperado})"
        )


if __name__ == "__main__":
    pytest.main([__file__, "-v", "--tb=short"])

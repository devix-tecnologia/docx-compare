"""
Testes para vincula√ß√£o de modifica√ß√µes √†s cl√°usulas baseado em tags.

Este teste valida a l√≥gica principal:
1. Tags s√£o mapeadas no documento COM tags (arquivo_com_tags)
2. As posi√ß√µes das tags representam onde o conte√∫do est√° no documento ORIGINAL
3. Modifica√ß√µes s√£o buscadas no documento ORIGINAL
4. Se a posi√ß√£o da modifica√ß√£o est√° entre posicao_inicio e posicao_fim de uma tag, vinculamos!
"""

import json
import re
import sys
from pathlib import Path

import pytest

# Adicionar o diret√≥rio pai ao path para importar directus_server
sys.path.insert(0, str(Path(__file__).parent.parent))


@pytest.fixture
def sample_data():
    """Carrega dados de exemplo para os testes."""
    sample_dir = Path(__file__).parent / "sample"

    with open(sample_dir / "documento_original.txt", encoding="utf-8") as f:
        documento_original = f.read()

    with open(sample_dir / "documento_com_tags.txt", encoding="utf-8") as f:
        documento_com_tags = f.read()

    with open(sample_dir / "tags_esperadas.json", encoding="utf-8") as f:
        tags_esperadas = json.load(f)

    with open(sample_dir / "modificacoes.json", encoding="utf-8") as f:
        modificacoes = json.load(f)

    with open(sample_dir / "vinculacao_esperada.json", encoding="utf-8") as f:
        vinculacao_esperada = json.load(f)

    return {
        "documento_original": documento_original,
        "documento_com_tags": documento_com_tags,
        "tags_esperadas": tags_esperadas,
        "modificacoes": modificacoes,
        "vinculacao_esperada": vinculacao_esperada,
    }


def test_mapear_posicoes_tags_no_documento_original(sample_data):
    """
    Testa que as tags s√£o mapeadas corretamente e suas posi√ß√µes
    representam onde o conte√∫do est√° no documento ORIGINAL.
    """
    documento_com_tags = sample_data["documento_com_tags"]
    documento_original = sample_data["documento_original"]
    tags_esperadas = sample_data["tags_esperadas"]

    # Simular o mapeamento de tags
    tag_positions = []

    for tag in tags_esperadas:
        # Remover as tags do conte√∫do para encontrar o texto limpo
        conteudo = tag["conteudo"]

        # Buscar no documento COM tags primeiro
        # (para simular o que o c√≥digo faz)
        pos_tagueado = documento_com_tags.find(conteudo)
        assert pos_tagueado >= 0, f"Tag {tag['nome']} n√£o encontrada no doc com tags"

        # Agora buscar no documento ORIGINAL para calcular a posi√ß√£o real
        pos_original = documento_original.find(conteudo)
        assert pos_original >= 0, f"Tag {tag['nome']} n√£o encontrada no doc original"

        # Validar que as posi√ß√µes esperadas est√£o corretas
        assert pos_original == tag["posicao_no_original"], (
            f"Tag {tag['nome']}: posi√ß√£o original incorreta"
        )
        assert pos_tagueado == tag["posicao_no_tagueado"], (
            f"Tag {tag['nome']}: posi√ß√£o tagueada incorreta"
        )

        tag_positions.append(
            {
                "tag_nome": tag["nome"],
                "posicao_inicio": pos_original,  # Posi√ß√£o no documento ORIGINAL
                "posicao_fim": pos_original + len(conteudo),
                "clausula_id": tag["clausula_id"],
                "conteudo": conteudo,
            }
        )

    # Ordenar por posi√ß√£o
    tag_positions.sort(key=lambda x: x["posicao_inicio"])

    # Verificar que temos 3 tags mapeadas
    assert len(tag_positions) == 3, "Deveria ter 3 tags mapeadas"

    # Verificar que as posi√ß√µes est√£o em ordem crescente
    for i in range(len(tag_positions) - 1):
        assert (
            tag_positions[i]["posicao_inicio"] < tag_positions[i + 1]["posicao_inicio"]
        ), "Tags devem estar ordenadas por posi√ß√£o"


def test_vincular_modificacoes_as_clausulas(sample_data):
    """
    Testa que as modifica√ß√µes s√£o vinculadas corretamente √†s cl√°usulas
    baseado nas posi√ß√µes das tags no documento ORIGINAL.
    """
    documento_original = sample_data["documento_original"]
    tags_esperadas = sample_data["tags_esperadas"]
    modificacoes = sample_data["modificacoes"]
    vinculacao_esperada = sample_data["vinculacao_esperada"]

    # Mapear posi√ß√µes das tags no documento ORIGINAL
    tag_positions = []
    for tag in tags_esperadas:
        conteudo = tag["conteudo"]
        pos_original = documento_original.find(conteudo)

        tag_positions.append(
            {
                "tag_nome": tag["nome"],
                "posicao_inicio": pos_original,
                "posicao_fim": pos_original + len(conteudo),
                "clausula_id": tag["clausula_id"],
            }
        )

    tag_positions.sort(key=lambda x: x["posicao_inicio"])

    # Vincular modifica√ß√µes √†s cl√°usulas
    resultados = {}

    for mod in modificacoes:
        mod_id = mod["id"]
        pos_mod = mod["posicao_original"]

        # Encontrar a tag que cont√©m esta posi√ß√£o
        clausula_vinculada = None
        for tag_info in tag_positions:
            if tag_info["posicao_inicio"] <= pos_mod <= tag_info["posicao_fim"]:
                clausula_vinculada = tag_info["clausula_id"]
                break

        resultados[mod_id] = clausula_vinculada

    # Verificar resultados esperados
    assert resultados == vinculacao_esperada, "Vincula√ß√£o n√£o corresponde ao esperado"

    # Verificar casos espec√≠ficos:
    # mod-1: posi√ß√£o 35, ANTES da primeira tag (posi√ß√£o 35 √© o in√≠cio do texto antes da tag)
    assert resultados["mod-1"] is None, "mod-1 deveria estar FORA de qualquer tag"

    # mod-2: posi√ß√£o 88, DENTRO da tag 1 (que vai de 35 a ~98)
    assert resultados["mod-2"] == "clausula-1", (
        "mod-2 deveria estar vinculada √† clausula-1"
    )

    # mod-3: posi√ß√£o 180, DENTRO da tag 2 (que vai de ~100 a ~162)
    # Nota: precisamos verificar os valores exatos
    assert resultados["mod-3"] == "clausula-2", (
        "mod-3 deveria estar vinculada √† clausula-2"
    )


def test_calcular_posicao_tag_removendo_marcadores(sample_data):
    """
    Testa que conseguimos calcular corretamente a posi√ß√£o de uma tag
    no documento original removendo os marcadores <<tag>> e <</tag>>.
    """
    documento_com_tags = sample_data["documento_com_tags"]
    documento_original = sample_data["documento_original"]

    # Exemplo: buscar a primeira tag
    # No doc com tags: "<<1>>Cl√°usula 1: ..."
    # No doc original: "Cl√°usula 1: ..."

    # Encontrar posi√ß√£o da tag 1 no documento com tags
    match = re.search(r"<<1>>(.*?)<<\/1>>", documento_com_tags, re.DOTALL)
    assert match is not None, "Tag 1 n√£o encontrada no documento com tags"

    conteudo_tag = match.group(1)
    posicao_com_tags = match.start(1)  # Posi√ß√£o do conte√∫do (ap√≥s <<1>>)

    # Encontrar no documento original
    posicao_original = documento_original.find(conteudo_tag)
    assert posicao_original >= 0, "Conte√∫do da tag n√£o encontrado no original"

    # A diferen√ßa entre as posi√ß√µes √© causada pelos marcadores de tag
    # que existem no documento com tags mas n√£o no original
    diferenca = posicao_com_tags - posicao_original
    assert diferenca > 0, "Documento com tags deveria ter mais caracteres (as tags)"

    # Verificar que a diferen√ßa √© aproximadamente o tamanho dos marcadores antes
    # At√© a tag 1: "<<1>>" = 5 caracteres a mais
    assert diferenca == 5, f"Diferen√ßa deveria ser 5 caracteres, mas foi {diferenca}"


def test_integracao_completa_vinculacao(sample_data):
    """
    Teste de integra√ß√£o completo simulando o fluxo real:
    1. Mapear tags no documento COM tags
    2. Calcular posi√ß√µes no documento ORIGINAL
    3. Buscar modifica√ß√µes no documento ORIGINAL
    4. Vincular baseado nas posi√ß√µes
    """
    documento_original = sample_data["documento_original"]
    documento_com_tags = sample_data["documento_com_tags"]
    tags_esperadas = sample_data["tags_esperadas"]
    modificacoes = sample_data["modificacoes"]
    vinculacao_esperada = sample_data["vinculacao_esperada"]

    # Simular o m√©todo _vincular_modificacoes_clausulas
    tag_positions = []

    for tag in tags_esperadas:
        conteudo = tag["conteudo"]

        # Buscar no documento COM tags (onde as tags est√£o marcadas)
        pos_com_tags = documento_com_tags.find(conteudo)
        assert pos_com_tags >= 0, "Conte√∫do n√£o encontrado no doc com tags"

        # Buscar no documento ORIGINAL (para saber a posi√ß√£o real)
        pos_original = documento_original.find(conteudo)
        assert pos_original >= 0, "Conte√∫do n√£o encontrado no doc original"

        # A posi√ß√£o que interessa √© a do documento ORIGINAL
        tag_positions.append(
            {
                "tag_nome": tag["nome"],
                "posicao_inicio": pos_original,
                "posicao_fim": pos_original + len(conteudo),
                "clausula_id": tag["clausula_id"],
            }
        )

    tag_positions.sort(key=lambda x: x["posicao_inicio"])

    # Vincular modifica√ß√µes
    vinculacoes = {}
    for mod in modificacoes:
        pos_mod = mod["posicao_original"]

        clausula_id = None
        for tag_info in tag_positions:
            if tag_info["posicao_inicio"] <= pos_mod <= tag_info["posicao_fim"]:
                clausula_id = tag_info["clausula_id"]
                break

        vinculacoes[mod["id"]] = clausula_id

    # Verificar resultado
    assert vinculacoes == vinculacao_esperada, (
        f"Vincula√ß√£o incorreta.\nEsperado: {vinculacao_esperada}\nObtido: {vinculacoes}"
    )

    # Estat√≠sticas
    total_mods = len(modificacoes)
    mods_vinculadas = sum(1 for v in vinculacoes.values() if v is not None)

    print(f"\nüìä Resumo: {mods_vinculadas}/{total_mods} modifica√ß√µes vinculadas")
    assert mods_vinculadas == 2, "Deveria ter 2 modifica√ß√µes vinculadas"


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])

"""
Teste que documenta o PROBLEMA de usar busca de texto quando h√° duplica√ß√µes.

PROBLEMA:
Se buscarmos texto ("DEF") em "ABC DEF GHI DEF JKL", sempre encontramos a
PRIMEIRA ocorr√™ncia (posi√ß√£o 4), mesmo que a modifica√ß√£o seja na SEGUNDA (posi√ß√£o 12).

SOLU√á√ÉO:
As modifica√ß√µes devem vir com POSI√á√ÉO ABSOLUTA do diff, n√£o buscar por texto.

ESTRAT√âGIA:
- Usa DirectusAPI REAL (instancia classe de produ√ß√£o)
- Mocka apenas as chamadas HTTP externas ao Directus
- Testa a L√ìGICA de vincula√ß√£o com texto duplicado
- Demonstra o problema e valida a solu√ß√£o implementada
"""

import sys
from pathlib import Path
from unittest.mock import MagicMock, patch

import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))
from directus_server import DirectusAPI


@pytest.fixture
def api():
    """Cria uma inst√¢ncia do DirectusAPI com mocks para requisi√ß√µes externas."""
    with patch("directus_server.requests") as mock_requests:
        # Configurar mock para n√£o fazer chamadas HTTP reais
        mock_requests.get.return_value = MagicMock(status_code=200, json=lambda: {})
        mock_requests.post.return_value = MagicMock(status_code=200, json=lambda: {})

        api_instance = DirectusAPI()
        yield api_instance


def test_problema_texto_duplicado_busca_primeira_ocorrencia(api):
    """
    DEMONSTRA O PROBLEMA: Busca de texto sempre encontra primeira ocorr√™ncia.

    Cen√°rio:
    - Documento: "ABC DEF GHI DEF JKL"
    - Tag 1: primeira "DEF" (posi√ß√£o 4-7)
    - Tag 2: segunda "DEF" (posi√ß√£o 12-15)
    - Modifica√ß√£o: DELETE da SEGUNDA "DEF" (deveria ser posi√ß√£o 12)

    Com busca de texto, find("DEF") retorna 4 (primeira), n√£o 12 (segunda)!
    """

    documento_original = "ABC DEF GHI DEF JKL"
    documento_com_tags = "ABC {{TAG-1}}DEF{{/TAG-1}} GHI {{TAG-2}}DEF{{/TAG-2}} JKL"

    tags_modelo = [
        {
            "tag_nome": "1",
            "conteudo": "{{TAG-1}}DEF{{/TAG-1}}",
            "clausulas": [{"id": "clausula-1", "nome": "Cl√°usula 1", "numero": "1"}],
        },
        {
            "tag_nome": "2",
            "conteudo": "{{TAG-2}}DEF{{/TAG-2}}",
            "clausulas": [{"id": "clausula-2", "nome": "Cl√°usula 2", "numero": "2"}],
        },
    ]

    # Modifica√ß√£o deveria estar na SEGUNDA ocorr√™ncia de DEF
    # Mas como passamos apenas o texto, a busca encontrar√° a PRIMEIRA
    modificacoes = [
        {
            "id": "mod-1",
            "tipo": "REMOCAO",
            "conteudo": {"original": "DEF"},
            # FALTA: posi√ß√£o absoluta! (deveria ser 12, n√£o buscar por texto)
        }
    ]

    resultado = api._vincular_modificacoes_clausulas(
        modificacoes=modificacoes,
        tags_modelo=tags_modelo,
        texto_com_tags=documento_com_tags,
        texto_original=documento_original,
        texto_modificado=documento_original,
    )

    # A fun√ß√£o atual vai vincular √† clausula-1 (ERRADO)
    # porque find("DEF") retorna 4, n√£o 12
    assert len(resultado) == 1
    mod = resultado[0]

    print("\n‚ö†Ô∏è  BUG DETECTADO:")
    print(f"   Modifica√ß√£o vinculada a: {mod.get('clausula_id')}")
    print(f"   Posi√ß√£o encontrada: {mod.get('posicao_inicio')}")
    print("   ESPERADO: clausula-2, posi√ß√£o 12")
    print(f"   OBTIDO: {mod.get('clausula_id')}, posi√ß√£o {mod.get('posicao_inicio')}")

    # Este teste DEVE FALHAR com a implementa√ß√£o atual!
    # Queremos que a modifica√ß√£o seja na clausula-2, mas ser√° na clausula-1
    assert mod.get("clausula_id") == "clausula-2", (
        f"‚ùå BUG: Modifica√ß√£o deveria estar na clausula-2 (segunda DEF), "
        f"mas est√° em {mod.get('clausula_id')} (primeira DEF encontrada por find())"
    )


def test_solucao_usar_posicao_absoluta_do_diff(api):
    """
    DEMONSTRA A SOLU√á√ÉO: Modifica√ß√µes devem vir com posi√ß√£o absoluta.

    As modifica√ß√µes devem ter:
    - posicao_inicio: posi√ß√£o absoluta no documento original
    - posicao_fim: posi√ß√£o fim no documento original

    Essas posi√ß√µes v√™m do DIFF, que sabe exatamente onde est√° cada mudan√ßa.
    """

    documento_original = "ABC DEF GHI DEF JKL"
    documento_com_tags = "ABC {{TAG-1}}DEF{{/TAG-1}} GHI {{TAG-2}}DEF{{/TAG-2}} JKL"

    tags_modelo = [
        {
            "tag_nome": "1",
            "conteudo": "{{TAG-1}}DEF{{/TAG-1}}",
            "clausulas": [{"id": "clausula-1", "nome": "Cl√°usula 1", "numero": "1"}],
        },
        {
            "tag_nome": "2",
            "conteudo": "{{TAG-2}}DEF{{/TAG-2}}",
            "clausulas": [{"id": "clausula-2", "nome": "Cl√°usula 2", "numero": "2"}],
        },
    ]

    # Modifica√ß√£o COM POSI√á√ÉO ABSOLUTA (vinda do diff)
    modificacoes = [
        {
            "id": "mod-1",
            "tipo": "REMOCAO",
            "conteudo": {"original": "DEF"},
            # POSI√á√ÉO ABSOLUTA do diff: segunda DEF est√° em 12-15
            "posicao_inicio": 12,
            "posicao_fim": 15,
        }
    ]

    # TODO: Implementar vincula√ß√£o baseada em posi√ß√£o, n√£o em busca de texto
    # resultado = api._vincular_modificacoes_por_posicao(...)

    print("\nüí° SOLU√á√ÉO:")
    print("   1. Diff calcula posi√ß√µes absolutas das modifica√ß√µes")
    print("   2. Tags t√™m posi√ß√µes absolutas no documento original")
    print(
        "   3. Vincula√ß√£o: comparar ranges (posicao_inicio <= pos_mod <= posicao_fim)"
    )
    print("   4. N√£o usar find() - usar posi√ß√µes diretas!")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])

"""
Testes para validar vincula√ß√£o correta com texto duplicado.

PROBLEMA ORIGINAL:
Se buscarmos texto ("DEF") em "ABC DEF GHI DEF JKL", find() sempre encontra a
PRIMEIRA ocorr√™ncia (posi√ß√£o 4), mesmo que a modifica√ß√£o seja na SEGUNDA (posi√ß√£o 12).

SOLU√á√ÉO IMPLEMENTADA:
As modifica√ß√µes v√™m com POSI√á√ÉO ABSOLUTA do diff, n√£o buscamos por texto.
Estes testes VALIDAM que a solu√ß√£o funciona corretamente.

ESTRAT√âGIA:
- Usa DirectusAPI REAL (instancia classe de produ√ß√£o)
- Mocka apenas as chamadas HTTP externas ao Directus
- Valida que posi√ß√µes absolutas resolvem o problema de texto duplicado
- SE ESTES TESTES FALHAREM, h√° uma regress√£o que precisa ser corrigida
"""

import sys
from pathlib import Path
from unittest.mock import MagicMock, patch

import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))
from directus_server import DirectusAPI


@pytest.fixture
def api():
    """Cria uma inst√¢ncia do DirectusAPI com mocks para requisi√ß√µes externas."""
    with patch("directus_server.requests") as mock_requests:
        # Configurar mock para n√£o fazer chamadas HTTP reais
        mock_requests.get.return_value = MagicMock(status_code=200, json=lambda: {})
        mock_requests.post.return_value = MagicMock(status_code=200, json=lambda: {})

        api_instance = DirectusAPI()
        yield api_instance


def test_texto_duplicado_primeira_ocorrencia_vinculada_corretamente(api):
    """
    Valida que modifica√ß√£o na PRIMEIRA ocorr√™ncia de texto duplicado √© vinculada corretamente.

    Cen√°rio:
    - Documento: "ABC DEF GHI DEF JKL"
    - Tag 1: primeira "DEF" (posi√ß√£o 4-7)
    - Tag 2: segunda "DEF" (posi√ß√£o 12-15)
    - Modifica√ß√£o: DELETE da PRIMEIRA "DEF" com posi√ß√£o absoluta 4

    RESULTADO ESPERADO: Modifica√ß√£o vinculada √† clausula-1 ‚úÖ
    """

    documento_original = "ABC DEF GHI DEF JKL"
    documento_com_tags = "ABC {{TAG-1}}DEF{{/TAG-1}} GHI {{TAG-2}}DEF{{/TAG-2}} JKL"

    tags_modelo = [
        {
            "tag_nome": "1",
            "conteudo": "{{TAG-1}}DEF{{/TAG-1}}",
            "clausulas": [{"id": "clausula-1", "nome": "Cl√°usula 1", "numero": "1"}],
            # Posi√ß√£o absoluta da primeira DEF
            "posicao_inicio_texto": 4,
            "posicao_fim_texto": 7,
        },
        {
            "tag_nome": "2",
            "conteudo": "{{TAG-2}}DEF{{/TAG-2}}",
            "clausulas": [{"id": "clausula-2", "nome": "Cl√°usula 2", "numero": "2"}],
            # Posi√ß√£o absoluta da segunda DEF
            "posicao_inicio_texto": 12,
            "posicao_fim_texto": 15,
        },
    ]

    # Modifica√ß√£o COM POSI√á√ÉO ABSOLUTA: primeira DEF (4-7)
    modificacoes = [
        {
            "id": "mod-1",
            "tipo": "REMOCAO",
            "conteudo": {"original": "DEF"},
            "posicao_inicio": 4,
            "posicao_fim": 7,
        }
    ]

    resultado = api._vincular_modificacoes_clausulas(
        modificacoes=modificacoes,
        tags_modelo=tags_modelo,
        texto_com_tags=documento_com_tags,
        texto_original=documento_original,
        texto_modificado=documento_original,
    )

    assert len(resultado) == 1
    mod = resultado[0]

    # VALIDA√á√ÉO: Deve vincular √† clausula-1 (primeira ocorr√™ncia)
    assert mod.get("clausula_id") == "clausula-1", (
        f"‚ùå REGRESS√ÉO: Modifica√ß√£o na primeira DEF (pos 4) deveria vincular √† clausula-1, "
        f"mas est√° em {mod.get('clausula_id')}"
    )
    assert mod.get("posicao_inicio") == 4, "Posi√ß√£o de in√≠cio deve ser 4"
    assert mod.get("posicao_fim") == 7, "Posi√ß√£o de fim deve ser 7"

    print("\n‚úÖ Primeira ocorr√™ncia vinculada corretamente √† clausula-1")


def test_texto_duplicado_segunda_ocorrencia_vinculada_corretamente(api):
    """
    Valida que modifica√ß√£o na SEGUNDA ocorr√™ncia de texto duplicado √© vinculada corretamente.

    Cen√°rio:
    - Documento: "ABC DEF GHI DEF JKL"
    - Tag 1: primeira "DEF" (posi√ß√£o 4-7)
    - Tag 2: segunda "DEF" (posi√ß√£o 12-15)
    - Modifica√ß√£o: DELETE da SEGUNDA "DEF" com posi√ß√£o absoluta 12

    RESULTADO ESPERADO: Modifica√ß√£o vinculada √† clausula-2 ‚úÖ

    ESTE √â O CASO CR√çTICO que falharia com busca de texto!
    """

    documento_original = "ABC DEF GHI DEF JKL"
    documento_com_tags = "ABC {{TAG-1}}DEF{{/TAG-1}} GHI {{TAG-2}}DEF{{/TAG-2}} JKL"

    tags_modelo = [
        {
            "tag_nome": "1",
            "conteudo": "{{TAG-1}}DEF{{/TAG-1}}",
            "clausulas": [{"id": "clausula-1", "nome": "Cl√°usula 1", "numero": "1"}],
            # Posi√ß√£o absoluta da primeira DEF
            "posicao_inicio_texto": 4,
            "posicao_fim_texto": 7,
        },
        {
            "tag_nome": "2",
            "conteudo": "{{TAG-2}}DEF{{/TAG-2}}",
            "clausulas": [{"id": "clausula-2", "nome": "Cl√°usula 2", "numero": "2"}],
            # Posi√ß√£o absoluta da segunda DEF
            "posicao_inicio_texto": 12,
            "posicao_fim_texto": 15,
        },
    ]

    # Modifica√ß√£o COM POSI√á√ÉO ABSOLUTA: segunda DEF (12-15)
    modificacoes = [
        {
            "id": "mod-1",
            "tipo": "REMOCAO",
            "conteudo": {"original": "DEF"},
            "posicao_inicio": 12,  # Segunda ocorr√™ncia!
            "posicao_fim": 15,
        }
    ]

    resultado = api._vincular_modificacoes_clausulas(
        modificacoes=modificacoes,
        tags_modelo=tags_modelo,
        texto_com_tags=documento_com_tags,
        texto_original=documento_original,
        texto_modificado=documento_original,
    )

    assert len(resultado) == 1
    mod = resultado[0]

    # VALIDA√á√ÉO CR√çTICA: Deve vincular √† clausula-2 (segunda ocorr√™ncia)
    # Se falhar aqui, a busca de texto voltou e h√° uma REGRESS√ÉO!
    assert mod.get("clausula_id") == "clausula-2", (
        f"‚ùå REGRESS√ÉO CR√çTICA: Modifica√ß√£o na segunda DEF (pos 12) deveria vincular √† clausula-2, "
        f"mas est√° em {mod.get('clausula_id')}. "
        f"Posi√ß√£o encontrada: {mod.get('posicao_inicio')}. "
        f"Isso indica que voltamos a usar busca de texto ao inv√©s de posi√ß√µes absolutas!"
    )
    assert mod.get("posicao_inicio") == 12, "Posi√ß√£o de in√≠cio deve ser 12"
    assert mod.get("posicao_fim") == 15, "Posi√ß√£o de fim deve ser 15"

    print("\n‚úÖ Segunda ocorr√™ncia vinculada corretamente √† clausula-2")
    print("   üí° Este teste valida que N√ÉO estamos usando busca de texto!")


def test_multiplas_duplicacoes_todas_vinculadas_corretamente(api):
    """
    Valida que M√öLTIPLAS modifica√ß√µes em texto duplicado s√£o vinculadas corretamente.

    Cen√°rio complexo:
    - Documento: "ABC DEF GHI DEF JKL DEF MNO"
    - 3 ocorr√™ncias de "DEF" em posi√ß√µes 4, 12, 20
    - 3 tags cobrindo cada ocorr√™ncia
    - 3 modifica√ß√µes, uma em cada posi√ß√£o

    RESULTADO ESPERADO: Cada modifica√ß√£o vinculada √† tag correta ‚úÖ
    """

    documento_original = "ABC DEF GHI DEF JKL DEF MNO"
    documento_com_tags = (
        "ABC {{TAG-1}}DEF{{/TAG-1}} GHI {{TAG-2}}DEF{{/TAG-2}} JKL {{TAG-3}}DEF{{/TAG-3}} MNO"
    )

    tags_modelo = [
        {
            "tag_nome": "1",
            "conteudo": "{{TAG-1}}DEF{{/TAG-1}}",
            "clausulas": [{"id": "clausula-1", "nome": "Cl√°usula 1", "numero": "1"}],
            "posicao_inicio_texto": 4,
            "posicao_fim_texto": 7,
        },
        {
            "tag_nome": "2",
            "conteudo": "{{TAG-2}}DEF{{/TAG-2}}",
            "clausulas": [{"id": "clausula-2", "nome": "Cl√°usula 2", "numero": "2"}],
            "posicao_inicio_texto": 12,
            "posicao_fim_texto": 15,
        },
        {
            "tag_nome": "3",
            "conteudo": "{{TAG-3}}DEF{{/TAG-3}}",
            "clausulas": [{"id": "clausula-3", "nome": "Cl√°usula 3", "numero": "3"}],
            "posicao_inicio_texto": 20,
            "posicao_fim_texto": 23,
        },
    ]

    # 3 modifica√ß√µes COM POSI√á√ïES ABSOLUTAS
    modificacoes = [
        {
            "id": "mod-1",
            "tipo": "REMOCAO",
            "conteudo": {"original": "DEF"},
            "posicao_inicio": 4,
            "posicao_fim": 7,
        },
        {
            "id": "mod-2",
            "tipo": "ALTERACAO",
            "conteudo": {"original": "DEF", "novo": "XYZ"},
            "posicao_inicio": 12,
            "posicao_fim": 15,
        },
        {
            "id": "mod-3",
            "tipo": "REMOCAO",
            "conteudo": {"original": "DEF"},
            "posicao_inicio": 20,
            "posicao_fim": 23,
        },
    ]

    resultado = api._vincular_modificacoes_clausulas(
        modificacoes=modificacoes,
        tags_modelo=tags_modelo,
        texto_com_tags=documento_com_tags,
        texto_original=documento_original,
        texto_modificado=documento_original,
    )

    assert len(resultado) == 3

    # Mapear resultados por ID
    mods_dict = {mod["id"]: mod for mod in resultado}

    # VALIDA√á√ÉO: Cada modifica√ß√£o deve vincular √† tag correta
    assert mods_dict["mod-1"].get("clausula_id") == "clausula-1", (
        f"‚ùå REGRESS√ÉO: mod-1 (pos 4) deveria vincular √† clausula-1, "
        f"mas est√° em {mods_dict['mod-1'].get('clausula_id')}"
    )

    assert mods_dict["mod-2"].get("clausula_id") == "clausula-2", (
        f"‚ùå REGRESS√ÉO: mod-2 (pos 12) deveria vincular √† clausula-2, "
        f"mas est√° em {mods_dict['mod-2'].get('clausula_id')}"
    )

    assert mods_dict["mod-3"].get("clausula_id") == "clausula-3", (
        f"‚ùå REGRESS√ÉO: mod-3 (pos 20) deveria vincular √† clausula-3, "
        f"mas est√° em {mods_dict['mod-3'].get('clausula_id')}"
    )

    print("\n‚úÖ Todas as 3 modifica√ß√µes em texto duplicado vinculadas corretamente!")
    print(f"   mod-1 (pos 4):  {mods_dict['mod-1'].get('clausula_id')}")
    print(f"   mod-2 (pos 12): {mods_dict['mod-2'].get('clausula_id')}")
    print(f"   mod-3 (pos 20): {mods_dict['mod-3'].get('clausula_id')}")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
    # resultado = api._vincular_modificacoes_por_posicao(...)

    print("\nüí° SOLU√á√ÉO:")
    print("   1. Diff calcula posi√ß√µes absolutas das modifica√ß√µes")
    print("   2. Tags t√™m posi√ß√µes absolutas no documento original")
    print(
        "   3. Vincula√ß√£o: comparar ranges (posicao_inicio <= pos_mod <= posicao_fim)"
    )
    print("   4. N√£o usar find() - usar posi√ß√µes diretas!")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])

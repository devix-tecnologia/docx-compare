#!/usr/bin/env python3
"""
Teste de vincula√ß√£o com formata√ß√µes variadas

Este teste tenta reproduzir problemas reais de formata√ß√£o:
- Espa√ßos m√∫ltiplos
- Tabs vs espa√ßos
- Quebras de linha diferentes
- Espa√ßos no in√≠cio/fim de linhas

Usa mocks para requisi√ß√µes HTTP externas ao Directus
"""

import os
import sys

# Adicionar o diret√≥rio versiona-ai ao path
versiona_ai_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, versiona_ai_dir)

# ruff: noqa: E402
from directus_server import DirectusAPI


def test_vinculacao_com_formatacao_variada():
    """Testa vincula√ß√£o com diferentes tipos de formata√ß√£o"""
    print("\n" + "=" * 80)
    print("üß™ TESTE: Vincula√ß√£o com Formata√ß√£o Variada")
    print("=" * 80 + "\n")

    # Modelo COM tags (com formata√ß√µes reais: espa√ßos extras, tabs, quebras variadas)
    modelo_com_tags = """{{1}}
Cl√°usula  1   -   DO OBJETO

    Este contrato   tem por   objeto    a presta√ß√£o
    de servi√ßos  de consultoria    em tecnologia.
{{/1}}

{{2}}
Cl√°usula 2  -  DO VALOR
	O valor total    do contrato √©   de R$   10.000,00
	(dez   mil reais).
{{/2}}

{{3}}
Cl√°usula   3   -   DO PRAZO

O prazo de execu√ß√£o   ser√° de    30   (trinta)
dias   corridos.
{{/3}}
"""

    print("üìÑ MODELO COM TAGS:")
    print(f"   Tamanho: {len(modelo_com_tags)} caracteres")
    tem_tabs = "Sim" if "\t" in modelo_com_tags else "N√£o"
    print(f"   Cont√©m tabs: {tem_tabs}")

    # Tags do modelo (posi√ß√µes no texto COM tags)
    tags_modelo = [
        {
            "tag_nome": "1",
            "posicao_inicio_texto": modelo_com_tags.find("{{1}}"),
            "posicao_fim_texto": modelo_com_tags.find("{{/1}}") + len("{{/1}}"),
            "clausulas": [{"id": "cl-1", "numero": "1", "nome": "DO OBJETO"}],
        },
        {
            "tag_nome": "2",
            "posicao_inicio_texto": modelo_com_tags.find("{{2}}"),
            "posicao_fim_texto": modelo_com_tags.find("{{/2}}") + len("{{/2}}"),
            "clausulas": [{"id": "cl-2", "numero": "2", "nome": "DO VALOR"}],
        },
        {
            "tag_nome": "3",
            "posicao_inicio_texto": modelo_com_tags.find("{{3}}"),
            "posicao_fim_texto": modelo_com_tags.find("{{/3}}") + len("{{/3}}"),
            "clausulas": [{"id": "cl-3", "numero": "3", "nome": "DO PRAZO"}],
        },
    ]

    print(f"\nüè∑Ô∏è  TAGS DO MODELO: {len(tags_modelo)}")
    for tag in tags_modelo:
        print(
            f"   - Tag {tag['tag_nome']}: pos {tag['posicao_inicio_texto']}-{tag['posicao_fim_texto']}"
        )

    # Modifica√ß√µes (simulando extra√≠das do diff HTML)
    # PROBLEMA: Os textos t√™m formata√ß√£o DIFERENTE do modelo!
    modificacoes = [
        {
            "id": 1,
            "tipo": "ALTERACAO",
            "conteudo": {
                "original": "Este contrato tem por objeto a presta√ß√£o",  # Sem espa√ßos extras!
                "novo": "Este contrato tem como objetivo a presta√ß√£o",
            },
        },
        {
            "id": 2,
            "tipo": "ALTERACAO",
            "conteudo": {
                "original": "O valor total do contrato √© de R$ 10.000,00",  # Sem tabs!
                "novo": "O valor total do contrato √© de R$ 15.000,00",
            },
        },
        {
            "id": 3,
            "tipo": "ALTERACAO",
            "conteudo": {
                "original": "O prazo de execu√ß√£o ser√° de 30 (trinta)",  # Espa√ßamento normal!
                "novo": "O prazo de execu√ß√£o ser√° de 60 (sessenta)",
            },
        },
    ]

    print(f"\nüìù MODIFICA√á√ïES: {len(modificacoes)}")
    for mod in modificacoes:
        texto = mod["conteudo"].get("original", mod["conteudo"].get("novo", ""))
        print(f"   - Mod #{mod['id']}: '{texto[:50]}...'")

    # Executar vincula√ß√£o
    api = DirectusAPI()
    resultado = api._vincular_modificacoes_clausulas(
        modificacoes, tags_modelo, modelo_com_tags
    )

    # Verificar resultados
    print("\n" + "=" * 80)
    print("üìä RESULTADOS DA VINCULA√á√ÉO")
    print("=" * 80)

    vinculadas = 0
    for mod in resultado:
        mod_id = mod.get("id")
        clausula_id = mod.get("clausula_id")
        clausula_numero = mod.get("clausula_numero")
        tag_nome = mod.get("tag_nome")
        pos_inicio = mod.get("posicao_inicio")
        pos_fim = mod.get("posicao_fim")

        if clausula_id:
            vinculadas += 1
            status = "‚úÖ"
        else:
            status = "‚ö†Ô∏è "

        print(
            f"{status} Mod #{mod_id}: "
            f"Tag={tag_nome or 'N/A'}, "
            f"Cl√°usula={clausula_numero or 'N/A'}, "
            f"Pos={pos_inicio}-{pos_fim if pos_fim else 'N/A'}"
        )

    print(f"\nüìà RESUMO: {vinculadas}/{len(modificacoes)} modifica√ß√µes vinculadas")

    # An√°lise do problema
    print("\n" + "=" * 80)
    print("üîç AN√ÅLISE DO PROBLEMA")
    print("=" * 80)

    if vinculadas < len(modificacoes):
        print("\n‚ùå PROBLEMA DETECTADO:")
        print("   As modifica√ß√µes t√™m formata√ß√£o DIFERENTE do modelo:")
        print("   - Modelo: espa√ßos extras, tabs, quebras variadas")
        print("   - Modifica√ß√µes: texto 'normalizado' do diff")
        print("\nüí° SOLU√á√ÉO NECESS√ÅRIA:")
        print("   1. Normalizar espa√ßos antes de buscar (substituir m√∫ltiplos por um)")
        print("   2. Usar busca fuzzy/aproximada")
        print("   3. OU: extrair texto limpo do modelo e usar para compara√ß√£o")
    else:
        print("\n‚úÖ VINCULA√á√ÉO FUNCIONOU!")
        print(
            "   A implementa√ß√£o atual conseguiu lidar com as diferen√ßas de formata√ß√£o"
        )

    print("\n" + "=" * 80 + "\n")

    # Assertion para o teste
    assert vinculadas == len(modificacoes), (
        f"Esperado {len(modificacoes)} vincula√ß√µes, obteve {vinculadas}"
    )


def test_vinculacao_com_normalizacao():
    """Testa vincula√ß√£o COM normaliza√ß√£o de espa√ßos"""
    print("\n" + "=" * 80)
    print("üß™ TESTE: Vincula√ß√£o com Normaliza√ß√£o de Espa√ßos")
    print("=" * 80 + "\n")

    # Mesmo modelo com formata√ß√£o problem√°tica
    modelo_com_tags = """{{1}}
Cl√°usula  1   -   DO OBJETO

    Este contrato   tem por   objeto    a presta√ß√£o
    de servi√ßos  de consultoria.
{{/1}}

{{2}}
Cl√°usula 2  -  DO VALOR
	O valor total    do contrato √©   de R$   10.000,00
	(dez   mil reais).
{{/2}}
"""

    tags_modelo = [
        {
            "tag_nome": "1",
            "posicao_inicio_texto": modelo_com_tags.find("{{1}}"),
            "posicao_fim_texto": modelo_com_tags.find("{{/1}}") + len("{{/1}}"),
            "clausulas": [{"id": "cl-1", "numero": "1", "nome": "DO OBJETO"}],
        },
        {
            "tag_nome": "2",
            "posicao_inicio_texto": modelo_com_tags.find("{{2}}"),
            "posicao_fim_texto": modelo_com_tags.find("{{/2}}") + len("{{/2}}"),
            "clausulas": [{"id": "cl-2", "numero": "2", "nome": "DO VALOR"}],
        },
    ]

    # Modifica√ß√µes com texto normalizado
    modificacoes = [
        {
            "id": 1,
            "tipo": "ALTERACAO",
            "conteudo": {
                "original": "Este contrato tem por objeto a presta√ß√£o",
                "novo": "Este contrato tem como objetivo a presta√ß√£o",
            },
        },
        {
            "id": 2,
            "tipo": "ALTERACAO",
            "conteudo": {
                "original": "O valor total do contrato √© de R$ 10.000,00",
                "novo": "O valor total do contrato √© de R$ 15.000,00",
            },
        },
    ]

    print("üí° ESTRAT√âGIA: Normalizar espa√ßos no modelo antes de buscar")
    print("   - Remover tags")
    print("   - Substituir m√∫ltiplos espa√ßos/tabs/quebras por um espa√ßo √∫nico")
    print("   - Remover espa√ßos no in√≠cio/fim de linhas\n")

    # Simular normaliza√ß√£o (o c√≥digo real deveria fazer isso)
    import re

    texto_sem_tags = re.sub(r"\{\{/?[\w.]+\}\}", "", modelo_com_tags)
    texto_normalizado = re.sub(r"\s+", " ", texto_sem_tags).strip()

    print(f"üìÑ Texto original: {len(modelo_com_tags)} chars")
    print(f"üìÑ Texto sem tags: {len(texto_sem_tags)} chars")
    print(f"üìÑ Texto normalizado: {len(texto_normalizado)} chars\n")

    # Verificar se os textos das modifica√ß√µes existem no texto normalizado
    print("üîç VERIFICANDO PRESEN√áA DOS TEXTOS:\n")
    for mod in modificacoes:
        texto_orig = mod["conteudo"]["original"]
        encontrado = texto_orig in texto_normalizado

        if encontrado:
            pos = texto_normalizado.find(texto_orig)
            print(f"‚úÖ Mod #{mod['id']}: ENCONTRADO na posi√ß√£o {pos}")
        else:
            print(f"‚ùå Mod #{mod['id']}: N√ÉO ENCONTRADO")
            # Tentar busca parcial
            palavras = texto_orig.split()[:3]  # Primeiras 3 palavras
            busca_parcial = " ".join(palavras)
            if busca_parcial in texto_normalizado:
                pos = texto_normalizado.find(busca_parcial)
                print(f"   üí° Busca parcial '{busca_parcial}' encontrada em {pos}")

    print("\n" + "=" * 80 + "\n")


def test_vinculacao_com_mock_completo():
    """
    Testa vincula√ß√£o usando a implementa√ß√£o REAL com MOCKS para APIs externas
    Simula cen√°rio completo: processo de vers√£o com modelo e vincula√ß√£o
    """
    print("\n" + "=" * 80)
    print("üß™ TESTE 3: Vincula√ß√£o com Mock de APIs Externas (Implementa√ß√£o Real)")
    print("=" * 80 + "\n")

    from unittest.mock import Mock, patch

    # =============================================================================
    # SETUP: Preparar mocks de arquivos DOCX tempor√°rios
    # =============================================================================

    # Criar arquivo DOCX tempor√°rio do modelo (com tags e formata√ß√£o variada)
    modelo_texto = """{{1}}
CL√ÅUSULA  PRIMEIRA   -   DO OBJETO

	Este   contrato   tem por    objeto    a presta√ß√£o
de   servi√ßos   de    consultoria.
{{/1}}

{{2}}
CL√ÅUSULA  SEGUNDA  -  DO VALOR
	O  valor   total do   contrato   √© de R$   10.000,00.
{{/2}}
"""

    # Criar arquivo DOCX tempor√°rio da vers√£o (sem tags, formata√ß√£o normalizada)
    versao_texto = """CL√ÅUSULA PRIMEIRA - DO OBJETO

Este contrato tem por objeto a presta√ß√£o
de servi√ßos de consultoria.

CL√ÅUSULA SEGUNDA - DO VALOR
O valor total do contrato √© de R$ 10.000,00.
"""

    # Modifica√ß√µes simuladas (como viriam do diff)
    modificacoes_mock = [
        {
            "id": 1,
            "tipo": "ALTERACAO",
            "conteudo": {
                "original": "presta√ß√£o de servi√ßos de consultoria",  # Texto espec√≠fico da cl√°usula 1
                "novo": "fornecimento de servi√ßos de consultoria",
            },
        },
        {
            "id": 2,
            "tipo": "ALTERACAO",
            "conteudo": {
                "original": "valor total do contrato",  # Texto espec√≠fico da cl√°usula 2
                "novo": "valor integral do contrato",
            },
        },
    ]

    print("üì¶ MOCKS CONFIGURADOS:")
    print(f"   - Modelo: {len(modelo_texto)} chars (COM tags e formata√ß√£o variada)")
    print(f"   - Vers√£o: {len(versao_texto)} chars (SEM tags, normalizado)")
    print(f"   - Modifica√ß√µes: {len(modificacoes_mock)} altera√ß√µes\n")

    # =============================================================================
    # MOCK: Simular resposta do Directus para tags do modelo
    # =============================================================================

    tags_modelo_mock = {
        "data": [
            {
                "id": "tag-1-id",
                "tag_nome": "1",
                "posicao_inicio_texto": modelo_texto.find("{{1}}"),
                "posicao_fim_texto": modelo_texto.find("{{/1}}") + len("{{/1}}"),
                "clausulas": [
                    {
                        "id": "clausula-1-uuid",
                        "numero": "1",
                        "nome": "DO OBJETO",
                    }
                ],
            },
            {
                "id": "tag-2-id",
                "tag_nome": "2",
                "posicao_inicio_texto": modelo_texto.find("{{2}}"),
                "posicao_fim_texto": modelo_texto.find("{{/2}}") + len("{{/2}}"),
                "clausulas": [
                    {
                        "id": "clausula-2-uuid",
                        "numero": "2",
                        "nome": "DO VALOR",
                    }
                ],
            },
        ]
    }

    # =============================================================================
    # MOCK: Simular fun√ß√µes que fazem requisi√ß√µes externas
    # =============================================================================

    with patch("directus_server.requests.get") as mock_get:
        # Configurar mock de GET para buscar tags do modelo
        mock_response_tags = Mock()
        mock_response_tags.status_code = 200
        mock_response_tags.json.return_value = tags_modelo_mock
        mock_get.return_value = mock_response_tags

        # Criar inst√¢ncia da API
        api = DirectusAPI()

        # Simular passagem direta de dados (sem baixar arquivos)
        # Chamar DIRETAMENTE _vincular_modificacoes_clausulas
        print("üîó EXECUTANDO VINCULA√á√ÉO:\n")

        resultado = api._vincular_modificacoes_clausulas(
            modificacoes=modificacoes_mock,
            tags_modelo=tags_modelo_mock["data"],
            texto_com_tags=modelo_texto,
            texto_original=None,  # Vai usar texto_com_tags como fallback
            texto_modificado=None,
        )

        # =============================================================================
        # VERIFICA√á√ÉO: Analisar resultados
        # =============================================================================

        print("=" * 80)
        print("üìä RESULTADOS DA VINCULA√á√ÉO COM MOCK")
        print("=" * 80 + "\n")

        vinculadas = 0
        for mod in resultado:
            mod_id = mod.get("id")
            clausula_id = mod.get("clausula_id")
            clausula_numero = mod.get("clausula_numero")
            tag_nome = mod.get("tag_nome")
            pos_inicio = mod.get("posicao_inicio")
            pos_fim = mod.get("posicao_fim")

            if clausula_id:
                vinculadas += 1
                status = "‚úÖ"
                print(
                    f"{status} Mod #{mod_id}:"
                    f"\n   Tag: {tag_nome}"
                    f"\n   Cl√°usula: {clausula_numero} ({clausula_id})"
                    f"\n   Posi√ß√£o: {pos_inicio}-{pos_fim}"
                )
            else:
                status = "‚ö†Ô∏è "
                print(
                    f"{status} Mod #{mod_id}: SEM VINCULA√á√ÉO"
                    f"\n   Tag: {tag_nome or 'N/A'}"
                )

        print(
            f"\nüìà RESUMO FINAL: {vinculadas}/{len(modificacoes_mock)} modifica√ß√µes vinculadas"
        )

        # =============================================================================
        # VALIDA√á√ïES
        # =============================================================================

        print("\n" + "=" * 80)
        print("‚úîÔ∏è  VALIDA√á√ïES")
        print("=" * 80 + "\n")

        # Validar que todas as modifica√ß√µes foram vinculadas
        assert vinculadas == len(modificacoes_mock), (
            f"Esperado {len(modificacoes_mock)} vincula√ß√µes, obteve {vinculadas}"
        )
        print(f"‚úÖ Todas as {len(modificacoes_mock)} modifica√ß√µes foram vinculadas")

        # Validar que modifica√ß√£o 1 foi vinculada √† cl√°usula 1
        mod_1 = next(m for m in resultado if m["id"] == 1)
        assert mod_1.get("clausula_numero") == "1", "Mod 1 deveria estar na cl√°usula 1"
        assert mod_1.get("clausula_id") == "clausula-1-uuid"
        print("‚úÖ Modifica√ß√£o 1 vinculada corretamente √† Cl√°usula 1")

        # Validar que modifica√ß√£o 2 foi vinculada √† cl√°usula 2
        mod_2 = next(m for m in resultado if m["id"] == 2)
        assert mod_2.get("clausula_numero") == "2", "Mod 2 deveria estar na cl√°usula 2"
        assert mod_2.get("clausula_id") == "clausula-2-uuid"
        print("‚úÖ Modifica√ß√£o 2 vinculada corretamente √† Cl√°usula 2")

        # Validar que posi√ß√µes foram atribu√≠das
        assert mod_1.get("posicao_inicio") is not None, "Mod 1 deve ter posi√ß√£o in√≠cio"
        assert mod_1.get("posicao_fim") is not None, "Mod 1 deve ter posi√ß√£o fim"
        print("‚úÖ Posi√ß√µes foram atribu√≠das corretamente")

        # Validar que normaliza√ß√£o funcionou (textos com formata√ß√µes diferentes foram encontrados)
        print(
            "‚úÖ Normaliza√ß√£o de espa√ßos funcionou (formata√ß√µes diferentes encontradas)"
        )

        print("\n" + "=" * 80)
        print("üéâ TESTE COM MOCKS PASSOU COM SUCESSO!")
        print("=" * 80 + "\n")


if __name__ == "__main__":
    print("\nüöÄ Executando testes de vincula√ß√£o com formata√ß√£o...\n")

    try:
        test_vinculacao_com_formatacao_variada()
        print("‚úÖ Teste 1 passou!\n")
    except AssertionError as e:
        print(f"‚ùå Teste 1 falhou: {e}\n")
    except Exception as e:
        print(f"üí• Teste 1 erro: {e}\n")

    try:
        test_vinculacao_com_normalizacao()
        print("‚úÖ Teste 2 passou!\n")
    except Exception as e:
        print(f"üí• Teste 2 erro: {e}\n")

    try:
        test_vinculacao_com_mock_completo()
        print("‚úÖ Teste 3 (com mocks) passou!\n")
    except AssertionError as e:
        print(f"‚ùå Teste 3 falhou: {e}\n")
    except Exception as e:
        print(f"üí• Teste 3 erro: {e}\n")

    print("üèÅ Testes conclu√≠dos!\n")
